#separate brands data by year
brands_1990 <- data.table::data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table::data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table::data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table::data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table::data.table(brands[which(brands[, 10] == 2016), 1:9])
#get vector of observed summary statistics
obs_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
#convert to data frame with same structure as vector of observed summary statistics
sum_stats <- do.call("rbind", lapply(1:length(main_simulations$sum_stats), function(x){c(t(as.matrix(main_simulations$sum_stats[[x]])))}))
#restructure obs stats
obs_stats <- as.data.frame(t(obs_stats))
#store priors in new object for transformation for random forest
transf_priors <- main_simulations$priors
#log transform complexity and strength params, and logit transform radii (functions adopted from abc package)
logit_bounds <- c(0, 690)
logit <- function(param, logit_bounds){
temp <- (param - logit_bounds[1])/(logit_bounds[2] - logit_bounds[1])
return(log(temp/(1 - temp)))
}
inv_logit <- function(param, logit_bounds){
temp <- exp(param)/(1 + exp(param))
return((temp*(logit_bounds[2] - logit_bounds[1])) + logit_bounds[1])
}
transf_priors[, 1] <- log(transf_priors[, 1])
transf_priors[, 2] <- logit(transf_priors[, 2], logit_bounds)
transf_priors[, 3] <- logit(transf_priors[, 3], logit_bounds)
transf_priors[, 4] <- log(transf_priors[, 4])
transf_priors[, 5] <- log(transf_priors[, 5])
#plot
xlabs <- list(expression(Complexity~"("*italic(paste(lambda))*")"), expression(Copy~Radius~"("*italic(R[C])*")"), expression(Dist~Radius~"("*italic(R[D])*")"), expression(Copy~Strength~"("*italic(C)*")"), expression(Dist~Strength~"("*italic(D)*")"))
xlims <- list(c(0, 8), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
group_lines <- c("1" = "dotted", "0" = "solid")
for(i in 1:ncol(transf_priors)){
if(i %in% c(1, 4, 5)){
temp <- density(exp(transf_priors[, i]), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(exp(transf_priors[, i]))$x, density = density(exp(transf_priors[, i]))$y, id = 0, lt = 1)
} else{
temp <- density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds))$x, density = density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds))$y, id = 0, lt = 1)
}
posterior <- data.frame(value = temp$x, density = temp$y, id = 1, lt = 0)
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, linetype = as.factor(lt))) +
labs(x = xlabs[[i]], y = "Density") + xlim(xlims[[i]]) +
theme_linedraw() +
scale_linetype_manual(name = NULL, values = group_lines, labels = c("Prior", "Posterior"))
assign(names(transf_priors)[i], plot)
}
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
png("analysis/abc/abc_rf_posteriors.png", units = "in", width = 11, height = 7, res = 300)
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
dev.off()
#load predictions
load("analysis/abc/abc_nn_predictions.RData")
#plot
xlabs <- list(expression(Complexity~"("*italic(paste(lambda))*")"), expression(Copy~Radius~"("*italic(R[C])*")"), expression(Dist~Radius~"("*italic(R[D])*")"), expression(Copy~Strength~"("*italic(C)*")"), expression(Dist~Strength~"("*italic(D)*")"))
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 20), c(0, 20))
group_colors <- c("0" = "black", "1" = "red", "2" = "blue", "3" = "green", "4" = "purple", "5" = "orange")
for(i in 1:ncol(main_simulations$priors)){
prior <- data.frame(value = density(main_simulations$priors[, i])$x, density = density(main_simulations$priors[, i])$y, id = 0, lt = 1)
posterior <- do.call(rbind, lapply(1:length(abc_nn_predictions), function(x){
data.frame(value = density(abc_nn_predictions[[x]]$adj.values[, i])$x, density = density(abc_nn_predictions[[x]]$adj.values[, i])$y, id = x, lt = 0)
}))
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, color = as.factor(id), linetype = as.factor(lt))) +
labs(x = xlabs[[i]], y = "Density") + xlim(xlims[[i]]) +
theme_linedraw() +
scale_color_manual(values = group_colors, name = NULL, labels = c("Prior", tol_labels), guide = guide_legend(override.aes = list(linetype = c(2, 1, 1, 1, 1, 1)))) +
guides(linetype = "none")
assign(names(main_simulations$priors)[i], plot)
}
#load packages
library(data.table)
library(ggplot2)
library(ggfortify)
library(abcrf)
library(EasyABC)
library(abc)
library(tuneRanger)
library(parallel)
library(cowplot)
#set working directory, load data, etc.
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
source("cattlebrandABM.R")
#load data
load("analysis/main_simulations/main_simulations_1.RData")
a <- main_simulations
load("analysis/main_simulations/main_simulations_2.RData")
b <- main_simulations
load("analysis/main_simulations/main_simulations_3.RData")
c <- main_simulations
load("analysis/main_simulations/main_simulations_4.RData")
d <- main_simulations
load("analysis/main_simulations/main_simulations_5.RData")
e <- main_simulations
main_simulations <- list(priors = rbind(a$priors, b$priors, c$priors, d$priors, e$priors), sum_stats = c(a$sum_stats, b$sum_stats, c$sum_stats, d$sum_stats, e$sum_stats))
rm(list = c("a", "b", "c", "d", "e"))
#load predictions
load("analysis/abc/abc_nn_predictions.RData")
#plot
xlabs <- list(expression(Complexity~"("*italic(paste(lambda))*")"), expression(Copy~Radius~"("*italic(R[C])*")"), expression(Dist~Radius~"("*italic(R[D])*")"), expression(Copy~Strength~"("*italic(C)*")"), expression(Dist~Strength~"("*italic(D)*")"))
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 20), c(0, 20))
group_colors <- c("0" = "black", "1" = "red", "2" = "blue", "3" = "green", "4" = "purple", "5" = "orange")
for(i in 1:ncol(main_simulations$priors)){
prior <- data.frame(value = density(main_simulations$priors[, i])$x, density = density(main_simulations$priors[, i])$y, id = 0, lt = 1)
posterior <- do.call(rbind, lapply(1:length(abc_nn_predictions), function(x){
data.frame(value = density(abc_nn_predictions[[x]]$adj.values[, i])$x, density = density(abc_nn_predictions[[x]]$adj.values[, i])$y, id = x, lt = 0)
}))
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, color = as.factor(id), linetype = as.factor(lt))) +
labs(x = xlabs[[i]], y = "Density") + xlim(xlims[[i]]) +
theme_linedraw() +
scale_color_manual(values = group_colors, name = NULL, labels = c("Prior", tol_labels), guide = guide_legend(override.aes = list(linetype = c(2, 1, 1, 1, 1, 1)))) +
guides(linetype = "none")
assign(names(main_simulations$priors)[i], plot)
}
#tolerance levels to explore
tols <- c(0.1, 0.05, 0.01, 0.005, 0.001)
tol_labels <- c(bquote(italic(paste(epsilon))~'='~0.1),
bquote(italic(paste(epsilon))~'='~0.05),
bquote(italic(paste(epsilon))~'='~0.01),
bquote(italic(paste(epsilon))~'='~0.005),
bquote(italic(paste(epsilon))~'='~0.001))
#plot
xlabs <- list(expression(Complexity~"("*italic(paste(lambda))*")"), expression(Copy~Radius~"("*italic(R[C])*")"), expression(Dist~Radius~"("*italic(R[D])*")"), expression(Copy~Strength~"("*italic(C)*")"), expression(Dist~Strength~"("*italic(D)*")"))
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 20), c(0, 20))
group_colors <- c("0" = "black", "1" = "red", "2" = "blue", "3" = "green", "4" = "purple", "5" = "orange")
for(i in 1:ncol(main_simulations$priors)){
prior <- data.frame(value = density(main_simulations$priors[, i])$x, density = density(main_simulations$priors[, i])$y, id = 0, lt = 1)
posterior <- do.call(rbind, lapply(1:length(abc_nn_predictions), function(x){
data.frame(value = density(abc_nn_predictions[[x]]$adj.values[, i])$x, density = density(abc_nn_predictions[[x]]$adj.values[, i])$y, id = x, lt = 0)
}))
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, color = as.factor(id), linetype = as.factor(lt))) +
labs(x = xlabs[[i]], y = "Density") + xlim(xlims[[i]]) +
theme_linedraw() +
scale_color_manual(values = group_colors, name = NULL, labels = c("Prior", tol_labels), guide = guide_legend(override.aes = list(linetype = c(2, 1, 1, 1, 1, 1)))) +
guides(linetype = "none")
assign(names(main_simulations$priors)[i], plot)
}
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
png("analysis/abc/abc_nn_posteriors.png", units = "in", width = 11, height = 7, res = 300)
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
dev.off()
#load predictions
load("analysis/abc/abc_rej_predictions.RData")
#plot
xlabs <- list(expression(Complexity~"("*italic(paste(lambda))*")"), expression(Copy~Radius~"("*italic(R[C])*")"), expression(Dist~Radius~"("*italic(R[D])*")"), expression(Copy~Strength~"("*italic(C)*")"), expression(Dist~Strength~"("*italic(D)*")"))
xlims <- list(c(0, 25), c(1, 689), c(1, 689), c(0, 8), c(0, 8))
group_colors <- c("0" = "black", "1" = "red", "2" = "blue", "3" = "green", "4" = "purple", "5" = "orange")
for(i in 1:ncol(main_simulations$priors)){
prior <- data.frame(value = density(main_simulations$priors[, i])$x, density = density(main_simulations$priors[, i])$y, id = 0, lt = 1)
posterior <- do.call(rbind, lapply(1:length(abc_rej_predictions), function(x){
data.frame(value = density(abc_rej_predictions[[x]]$unadj.values[, i])$x, density = density(abc_rej_predictions[[x]]$unadj.values[, i])$y, id = x, lt = 0)
}))
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, color = as.factor(id), linetype = as.factor(lt))) +
labs(x = xlabs[[i]], y = "Density") + xlim(xlims[[i]]) +
theme_linedraw() +
scale_color_manual(values = group_colors, name = NULL, labels = c("Prior", tol_labels), guide = guide_legend(override.aes = list(linetype = c(2, 1, 1, 1, 1, 1)))) +
guides(linetype = "none")
assign(names(main_simulations$priors)[i], plot)
}
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
png("analysis/abc/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
dev.off()
#load packages
library(data.table)
library(ggplot2)
library(ggfortify)
library(abcrf)
library(EasyABC)
library(abc)
library(tuneRanger)
library(cowplot)
#set working directory, load data, etc.
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
#setwd(system("pwd", intern = T))
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
source("cattlebrandABM.R")
#modify function from abcrf::densityPlot.regAbcrf for weight extraction
extract_weights <- function(object, obs, training, paral=FALSE, ncores= if(paral) max(detectCores()-1,1) else 1, ...){
x <- obs
mf <- match.call(expand.dots=FALSE)
mf <- mf[1]
mf$formula <- object$formula
mf$data <- training
training <- mf$data
mf[[1L]] <- as.name("model.frame")
mf <- eval(mf, parent.frame() )
mt <- attr(mf, "terms")
resp <- model.response(mf)
obj <- object$model.rf
inbag <- matrix(unlist(obj$inbag.counts, use.names=FALSE), ncol=obj$num.trees, byrow=FALSE)
obj[["origNodes"]] <- predict(obj, training, predict.all=TRUE, num.threads=ncores)$predictions
obj[["origObs"]] <- model.response(mf)
#####################
origObs <- obj$origObs
origNodes <- obj$origNodes
nodes <- predict(obj, x, predict.all=TRUE, num.threads=ncores )$predictions
if(is.null(dim(nodes))) nodes <- matrix(nodes, nrow=1)
ntree <- obj$num.trees
nobs <- object$model.rf$num.samples
nnew <- nrow(x)
weights <- abcrf:::findweights(origNodes, nodes, inbag, as.integer(nobs), as.integer(nnew), as.integer(ntree)) # cpp function call
weights.std <- weights/ntree
return(weights.std[, 1])
}
#load data
load("analysis/abc/abc_rf_tuning.RData")
load("analysis/main_simulations/main_simulations_1.RData")
a <- main_simulations
load("analysis/main_simulations/main_simulations_2.RData")
b <- main_simulations
load("analysis/main_simulations/main_simulations_3.RData")
c <- main_simulations
load("analysis/main_simulations/main_simulations_4.RData")
d <- main_simulations
load("analysis/main_simulations/main_simulations_5.RData")
e <- main_simulations
main_simulations <- list(priors = rbind(a$priors, b$priors, c$priors, d$priors, e$priors), sum_stats = c(a$sum_stats, b$sum_stats, c$sum_stats, d$sum_stats, e$sum_stats))
rm(list = c("a", "b", "c", "d", "e"))
#separate brands data by year
brands_1990 <- data.table::data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table::data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table::data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table::data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table::data.table(brands[which(brands[, 10] == 2016), 1:9])
#get vector of observed summary statistics
obs_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
#convert to data frame with same structure as vector of observed summary statistics
sum_stats <- do.call("rbind", lapply(1:length(main_simulations$sum_stats), function(x){c(t(as.matrix(main_simulations$sum_stats[[x]])))}))
#restructure obs stats
obs_stats <- as.data.frame(t(obs_stats))
#store priors in new object for transformation for random forest
transf_priors <- main_simulations$priors
#log transform complexity and strength params, and logit transform radii (functions adopted from abc package)
logit_bounds <- c(0, 690)
logit <- function(param, logit_bounds){
temp <- (param - logit_bounds[1])/(logit_bounds[2] - logit_bounds[1])
return(log(temp/(1 - temp)))
}
inv_logit <- function(param, logit_bounds){
temp <- exp(param)/(1 + exp(param))
return((temp*(logit_bounds[2] - logit_bounds[1])) + logit_bounds[1])
}
transf_priors[, 1] <- log(transf_priors[, 1])
transf_priors[, 2] <- logit(transf_priors[, 2], logit_bounds)
transf_priors[, 3] <- logit(transf_priors[, 3], logit_bounds)
transf_priors[, 4] <- log(transf_priors[, 4])
transf_priors[, 5] <- log(transf_priors[, 5])
#set sample size for random forest (80% of data)
sample_size <- 0.8*nrow(sum_stats)
#construct object to hold predictions
abc_rf_predictions <- list()
#set number of cores
ncores <- detectCores() - 1
#set value of i
i <- 1
#load saved predictions
load("analysis/abc/abc_rf_predictions.RData")
abc_rf_predictions[[1]]
abc_rf_predictions[[1]]$OOB_NMAE
abc_rf_predictions[[1]]$OOB_NMAE
abc_rf_predictions[[4]]$OOB_NMAE
abc_rf_predictions[[5]]$OOB_NMAE
abc_rf_predictions[[2]]$OOB_NMAE
abc_rf_predictions[[3]]$OOB_NMAE
abc_rf_predictions[[3]]$OOB_MSE
abc_rf_predictions[[2]]$OOB_MSE
abc_rf_predictions[[4]]$OOB_MSE
abc_rf_predictions[[6]]$OOB_MSE
abc_rf_predictions[[4]]$OOB_MSE
abc_rf_predictions[[5]]$OOB_MSE
abc_rf_predictions[[1]]$OOB_MSE
abc_rf_predictions[[2]]$OOB_MSE
abc_rf_predictions[[2]]$OOB_NMAE
abc_rf_predictions[[2]]$prediction$post.NMAE.mean
abc_rf_predictions[[2]]$prediction$post.NMAE.mean
exp(abc_rf_predictions[[1]]$OOB_MSE)
exp(abc_rf_predictions[[2]]$OOB_MSE)
exp(abc_rf_predictions[[4]]$OOB_MSE)
exp(abc_rf_predictions[[5]]$OOB_MSE)
#HOW DO WE DEAL WITH TRANSFORMED ERROR?
predictions_table <- data.frame(median = c(exp(as.numeric(abc_rf_predictions[[1]]$prediction$med)),
inv_logit(as.numeric(abc_rf_predictions[[2]]$prediction$med), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$prediction$med), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$prediction$med)),
exp(as.numeric(abc_rf_predictions[[5]]$prediction$med))),
low_quant = c(exp(as.numeric(abc_rf_predictions[[1]]$prediction$quantiles[1])),
inv_logit(as.numeric(abc_rf_predictions[[2]]$prediction$quantiles[1]), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$prediction$quantiles[1]), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$prediction$quantiles[1])),
exp(as.numeric(abc_rf_predictions[[5]]$prediction$quantiles[1]))),
high_quant = c(exp(as.numeric(abc_rf_predictions[[1]]$prediction$quantiles[2])),
inv_logit(as.numeric(abc_rf_predictions[[2]]$prediction$quantiles[2]), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$prediction$quantiles[2]), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$prediction$quantiles[2])),
exp(as.numeric(abc_rf_predictions[[5]]$prediction$quantiles[2]))),
mse = c(exp(as.numeric(abc_rf_predictions[[1]]$OOB_MSE)),
inv_logit(as.numeric(abc_rf_predictions[[2]]$OOB_MSE), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$OOB_MSE), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$OOB_MSE)),
exp(as.numeric(abc_rf_predictions[[5]]$OOB_MSE))))
predictions_table
?abcrf
?predict.regAbcrf
#construct predictions table, with mse because (1) nmae is inf for radii and (2) it can be easily back-transformed
predictions_table <- data.frame(median = c(exp(as.numeric(abc_rf_predictions[[1]]$prediction$med)),
inv_logit(as.numeric(abc_rf_predictions[[2]]$prediction$med), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$prediction$med), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$prediction$med)),
exp(as.numeric(abc_rf_predictions[[5]]$prediction$med))),
low_quant = c(exp(as.numeric(abc_rf_predictions[[1]]$prediction$quantiles[1])),
inv_logit(as.numeric(abc_rf_predictions[[2]]$prediction$quantiles[1]), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$prediction$quantiles[1]), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$prediction$quantiles[1])),
exp(as.numeric(abc_rf_predictions[[5]]$prediction$quantiles[1]))),
high_quant = c(exp(as.numeric(abc_rf_predictions[[1]]$prediction$quantiles[2])),
inv_logit(as.numeric(abc_rf_predictions[[2]]$prediction$quantiles[2]), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$prediction$quantiles[2]), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$prediction$quantiles[2])),
exp(as.numeric(abc_rf_predictions[[5]]$prediction$quantiles[2]))),
rmse = c(exp(sqrt(as.numeric(abc_rf_predictions[[1]]$OOB_MSE))),
inv_logit(sqrt(as.numeric(abc_rf_predictions[[2]]$OOB_MSE)), logit_bounds),
inv_logit(sqrt(as.numeric(abc_rf_predictions[[3]]$OOB_MSE)), logit_bounds),
exp(sqrt(as.numeric(abc_rf_predictions[[4]]$OOB_MSE))),
exp(sqrt(as.numeric(abc_rf_predictions[[5]]$OOB_MSE)))))
predictions_table
exp(sqrt(as.numeric(abc_rf_predictions[[1]]$OOB_MSE)))
sqrt(exp(as.numeric(abc_rf_predictions[[1]]$OOB_MSE)))
#construct predictions table, with mse because (1) nmae is inf for radii and (2) it can be easily back-transformed
predictions_table <- data.frame(median = c(exp(as.numeric(abc_rf_predictions[[1]]$prediction$med)),
inv_logit(as.numeric(abc_rf_predictions[[2]]$prediction$med), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$prediction$med), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$prediction$med)),
exp(as.numeric(abc_rf_predictions[[5]]$prediction$med))),
low_quant = c(exp(as.numeric(abc_rf_predictions[[1]]$prediction$quantiles[1])),
inv_logit(as.numeric(abc_rf_predictions[[2]]$prediction$quantiles[1]), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$prediction$quantiles[1]), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$prediction$quantiles[1])),
exp(as.numeric(abc_rf_predictions[[5]]$prediction$quantiles[1]))),
high_quant = c(exp(as.numeric(abc_rf_predictions[[1]]$prediction$quantiles[2])),
inv_logit(as.numeric(abc_rf_predictions[[2]]$prediction$quantiles[2]), logit_bounds),
inv_logit(as.numeric(abc_rf_predictions[[3]]$prediction$quantiles[2]), logit_bounds),
exp(as.numeric(abc_rf_predictions[[4]]$prediction$quantiles[2])),
exp(as.numeric(abc_rf_predictions[[5]]$prediction$quantiles[2]))),
rmsle = c(sqrt(as.numeric(abc_rf_predictions[[1]]$OOB_MSE)),
sqrt(as.numeric(abc_rf_predictions[[2]]$OOB_MSE)),
sqrt(as.numeric(abc_rf_predictions[[3]]$OOB_MSE)),
sqrt(as.numeric(abc_rf_predictions[[4]]$OOB_MSE)),
sqrt(as.numeric(abc_rf_predictions[[5]]$OOB_MSE))))
predictions_table
#load saved predictions
load("analysis/abc/abc_rf_predictions.RData")
abc_rf_predictions[[1]]
#plot
xlabs <- list(expression(Complexity~"("*italic(paste(lambda))*")"), expression(Copy~Radius~"("*italic(R[C])*")"), expression(Dist~Radius~"("*italic(R[D])*")"), expression(Copy~Strength~"("*italic(C)*")"), expression(Dist~Strength~"("*italic(D)*")"))
xlims <- list(c(0, 8), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
group_lines <- c("1" = "dotted", "0" = "solid")
for(i in 1:ncol(transf_priors)){
if(i %in% c(1, 4, 5)){
temp <- density(exp(transf_priors[, i]), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(exp(transf_priors[, i]))$x, density = density(exp(transf_priors[, i]))$y, id = 0, lt = 1)
} else{
temp <- density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds))$x, density = density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds))$y, id = 0, lt = 1)
}
posterior <- data.frame(value = temp$x, density = temp$y, id = 1, lt = 0)
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, linetype = as.factor(lt))) +
labs(x = xlabs[[i]], y = "Density") + xlim(xlims[[i]]) +
theme_linedraw() +
scale_linetype_manual(name = NULL, values = group_lines, labels = c("Prior", "Posterior"))
assign(names(transf_priors)[i], plot)
}
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
abc_rf_predictions[[1]]$prediction
abc_rf_predictions[[4]]$prediction
predictions_table
?abcrf
#load packages
library(data.table)
library(ggplot2)
library(ggfortify)
library(abcrf)
library(EasyABC)
library(abc)
library(tuneRanger)
library(cowplot)
#set working directory, load data, etc.
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
#setwd(system("pwd", intern = T))
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
source("cattlebrandABM.R")
load("analysis/choice_simulations/choice_simulations_1.RData")
a <- choice_simulations
load("analysis/choice_simulations/choice_simulations_2.RData")
b <- choice_simulations
load("analysis/choice_simulations/choice_simulations_3.RData")
c <- choice_simulations
choice_simulations <- list(priors = rbind(a$priors, b$priors, c$priors), sum_stats = c(a$sum_stats, b$sum_stats, c$sum_stats))
rm(list = c("a", "b", "c"))
#separate brands data by year
brands_1990 <- data.table::data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table::data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table::data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table::data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table::data.table(brands[which(brands[, 10] == 2016), 1:9])
#get vector of observed summary statistics
obs_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
#convert to data frame with same structure as vector of observed summary statistics
sum_stats <- do.call("rbind", lapply(1:length(choice_simulations$sum_stats), function(x){c(t(as.matrix(choice_simulations$sum_stats[[x]])))}))
#restructure obs stats
obs_stats <- as.data.frame(t(obs_stats))
#create reference table
ref_table <- data.frame(index = as.factor(c(rep("null", 10000), rep("copy", 10000), rep("dist", 10000))), sum_stats = sum_stats)
#restructure obs stats
obs_stats <- as.data.frame(t(obs_stats))
names(obs_stats) <- names(ref_table)[-1]
#set sample size for random forest (80% of data)
sample_size <- 0.8*nrow(sum_stats)
#construct random forest for model choice
abc_choice <- abcrf(index ~ ., data = ref_table, group = list("null", "copy", "dist"), sampsize = sample_size, ntree = 1000)
#predict model of observed sum stats
abc_choice_prediction <- predict(abc_choice, obs = obs_stats, training = ref_table, sampsize = sample_size, ntree = 1000)
obs_stats
ref_table
obs_stats
#get vector of observed summary statistics
obs_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
#restructure obs stats
obs_stats <- as.data.frame(t(obs_stats))
obs_stats
#predict model of observed sum stats
abc_choice_prediction <- predict(abc_choice, obs = obs_stats, training = ref_table, sampsize = sample_size, ntree = 1000)
?predict.abcrf
#get vector of observed summary statistics
obs_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
#restructure obs stats
obs_stats <- as.data.frame(t(obs_stats))
names(obs_stats) <- names(ref_table)[-1]
#predict model of observed sum stats
abc_choice_prediction <- predict(abc_choice, obs = obs_stats, training = ref_table, sampsize = sample_size, ntree = 1000)
abc_choice_prediction
save(abc_choice_prediction, file = "analysis/abc/abc_choice_prediction.RData")
