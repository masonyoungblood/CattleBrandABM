#do pca
pca <- prcomp(rbind(sum_stats_a, sum_stats_b), scale = TRUE)
predicted <- predict(pca, data.frame(t(c(obs_sum_stats))))
par(mar = c(4.5, 4.5, 1, 1))
plot(pca$x[,1], pca$x[,2], col = scales::alpha("black", 0.05), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "red", pch = 8, cex = 4)
par(mar = c(4.5, 4.5, 1, 1))
plot(pca$x[,1], pca$x[,2], col = scales::alpha("black", 0.05), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "red", pch = 8, cex = 4)
plot(pca$x[,1], pca$x[,2], col = scales::alpha("black", 0.1), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "red", pch = 8, cex = 4)
plot(pca$x[,1], pca$x[,2], col = scales::alpha("black", 0.2), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "red", pch = 8, cex = 4)
plot(pca$x[,1], pca$x[,2], col = scales::alpha("black", 0.1), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "red", pch = 8, cex = 4)
?plot
nrow(sum_stats_a)
rep(scales::alpha("blue", 0.1), nrow(sum_stats_a))
c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a)))
plot(pca_b$x[,1], pca_b$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.15), nrow(sum_stats_a)), rep(scales::alpha("red", 0.15), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
?points
par(mar = c(4.5, 4.5, 1, 1))
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
?legend
plot(pca_b$x[,1], pca_b$x[,2], col = scales::alpha("black", 0.05), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted_b[,1], predicted_b[,2], col = "red", pch = 8, cex = 4)
legend(1, 1, "haiii")
legend(-10, 1, "haiii")
legend(-10, 8, "haiii")
legend(-10, 8, c("haiii", "suuup"))
legend(-10, 8, c("without angles", "with angles"))
plot(pca_b$x[,1], pca_b$x[,2], col = scales::alpha("black", 0.05), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted_b[,1], predicted_b[,2], col = "red", pch = 8, cex = 4)
par(mar = c(4.5, 4.5, 1, 1))
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend(-10, 8, c("without angles", "with angles"))
legend(-10, 8, c("without angles", "with angles"), col = ("blue", "red"))
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend(-10, 8, c("without angles", "with angles"), col = ("blue", "red"))
legend(-10, 8, c("without angles", "with angles"), fill = ("blue", "red"))
legend(-10, 8, c("without angles", "with angles"), fill = ("blue","red"))
legend(-10, 8, c("without angles", "with angles"), fill = ("blue"))
legend(-10, 8, c("without angles", "with angles"), fill = ("blue", "red"))
legend(-10, 8, c("without angles", "with angles"), fill = par("blue", "red"))
legend(-10, 8, c("without angles", "with angles"), col = par("blue", "red"))
par(mar = c(4.5, 4.5, 1, 1))
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend(-10, 8, c("without angles", "with angles"), col = par("blue", "red"))
legend(-10, 8, c("without angles", "with angles"), col = c("blue", "red"))
par(mar = c(4.5, 4.5, 1, 1))
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend(-10, 8, c("without angles", "with angles"), col = c("blue", "red"))
legend(-10, 8, c("without angles", "with angles"), fill = c("blue", "red"))
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend(-10, 8, c("without angles", "with angles"), fill = c("blue", "red"))
legend("topleft", c("without angles", "with angles"), fill = c("blue", "red"))
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend("topleft", c("without angles", "with angles"), fill = c("blue", "red"))
legend("topleft", c("without angles", "with angles"), fill = c("blue", "red"), pch = 8)
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend("topleft", c("without angles", "with angles"), fill = c("blue", "red"), pch = 16)
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend("topleft", c("without angles", "with angles"), col = c("blue", "red"), pch = 16)
#create plot
png("analysis/prior_simulations.png", units = "in", width = 4, height = 4, res = 300)
par(mar = c(4.5, 4.5, 1, 1))
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend("topleft", c("without angles", "with angles"), col = c("blue", "red"), pch = 16)
dev.off()
png("analysis/prior_simulations.png", units = "in", width = 4.5, height = 4.5, res = 300)
par(mar = c(4.5, 4.5, 1, 1))
plot(pca$x[,1], pca$x[,2], col = c(rep(scales::alpha("blue", 0.1), nrow(sum_stats_a)), rep(scales::alpha("red", 0.1), nrow(sum_stats_a))), pch = 16, xlab = "PC1", ylab = "PC2")
points(predicted[,1], predicted[,2], col = "black", pch = 8, cex = 4)
legend("topleft", c("without angles", "with angles"), col = c("blue", "red"), pch = 16)
dev.off()
library(rethinking)
library(dagitty)
# 1 -----------------------------------------------------------------------
#load data
data("NWOGrants")
#draw and plot DAG
dag <- dagitty("dag {
GE -> DI
GE -> AP
GE -> AW
AP -> AW
DI -> AP
DI -> AW
}")
coordinates(dag) <- list(x = c(GE = 1, DI = 2, AW = 3, AP = 2),
y = c(GE = 2, DI = 1, AW = 2, AP = 3))
plot( dag )
#there are no backdoors for gender, so the total effect requires a basic model
#first let's restructure the data
data <- NWOGrants
data$gender <- ifelse(data$gender == "m", 1 , 2)
data$discipline <- as.numeric(data$discipline)
data_list <- list(awards = data$awards, applications = data$applications, gender = data$gender)
model_a <- ulam(
alist(
awards ~ dbinom(applications, p),
logit(p) <- a[gender],
a[gender] ~ dnorm(0, 1.5)
), data = data_list, chains = 4)
precis(model_a)
precis(model_a, depth = 2)
#calculate contrast
post <- extract.samples(model_a)
diff_a <- post$a[,1] - post$a[,2]
diff_p <- inv_logit(post$a[,1]) - inv_logit(post$a[,2])
precis(list(diff_a = diff_a, diff_p = diff_p))
#do a posterior check
postcheck(model_a)
postcheck
str(postcheck(model_a))
#do a posterior check
postcheck <- postcheck(model_a)
postcheck
#do a posterior check
postcheck <- postcheck(model_a)
postcheck$mean
#do a posterior check
postcheck <- postcheck(model_a)
# draw lines connecting points from same dept
for(i in 1:length(postcheck$mean)) {
x <- 1 + 2*(i-1)
y1 <- data$awards[x]/data$applications[x]
y2 <- data$awards[x+1]/data$applications[x+1]
lines(c(x, x + 1), c(y1, y2), col = rangi2, lwd = 2)
text(x + 0.5, (y1 + y2)/2 + 0.05, data$discipline[x], cex = 0.8, col = rangi2)
}
#draw and plot DAG
dag <- dagitty("dag {
GE -> DI
GE -> AP
GE -> AW
AP -> AW
DI -> AP
DI -> AW
}")
coordinates(dag) <- list(x = c(GE = 1, DI = 2, AW = 3, AP = 2),
y = c(GE = 2, DI = 1, AW = 2, AP = 3))
plot( dag )
#run model
model_b <- ulam(
alist(
awards ~ dbinom(applications, p),
logit(p) <- a[gender, discipline, applications],
matrix[gender, discipline, applications]:a ~ dnorm(0, 1.5)
), data = data_list, chains = 4)
#reformat data as list of vectors
data_list <- list(awards = data$awards, applications = data$applications, gender = data$gender, discipline = data$discipline)
#run model
model_b <- ulam(
alist(
awards ~ dbinom(applications, p),
logit(p) <- a[gender, discipline, applications],
matrix[gender, discipline, applications]:a ~ dnorm(0, 1.5)
), data = data_list, chains = 4)
#run model
model_b <- ulam(
alist(
awards ~ dbinom(applications, p),
logit(p) <- a[gender, discipline, applications],
array[gender, discipline, applications]:a ~ dnorm(0, 1.5)
), data = data_list, chains = 4)
#run model
model_b <- ulam(
alist(
awards ~ dbinom(applications, p),
logit(p) <- a[gender, discipline],
matrix[gender, discipline]:a ~ dnorm(0, 1.5)
), data = data_list, chains = 4)
data
data$applications
sum(data$applications)
#get total number of applications
total_apps <- sum(data$applications)
data$discipline
unique(data$discipline)
sort(unique(data$discipline))
which(data$discipline == 1)
data$applications[which(data$discipline == 1)]
sum(data$applications[which(data$discipline == 1)])
#get applications per discipline
apps_per_disc <- sapply(sort(unique(data$discipline)), function(x){sum(data$applications[which(data$discipline == x)])})
apps_per_disc
#simulate as if all apps were from men
p_men <- link(model_b, data = list(discipline = rep(sort(unique(data$discipline)), times = apps_per_disc),
applications = rep(1, total_apps),
gender = rep(1, total_apps)))
p_men
#simulate as if all apps were from women
p_women <- link(model_b, data = list(discipline = rep(sort(unique(data$discipline)), times = apps_per_disc),
applications = rep(1, total_apps),
gender = rep(2, total_apps)))
dens(p_women - p_men)
dens(p_women - p_men, lwd = 4, col = 2)
xtabs(data$applications ~ data$discipline)
data
xtabs(data$applications ~ data$discipline)/sum(data$applications)
#get proportion of applications that came from each discipline
prop_per_disc <- xtabs(data$applications ~ data$discipline)/sum(data$applications)
#calculate contrast
post_a <- extract.samples(model_a)
diff_a <- inv_logit(post_a$a[,1]) - inv_logit(post_a$a[,2])
precis(diff_a)
#calculate contrasts for each discipline
post_b <- extract.samples(model_b)
inv_logit(post_b$a)
#calculate contrasts for each discipline
post_b <- extract.samples(model_b)
diff_b <- sapply(sort(unique(data$discipline)), function(x){inv_logit(post_b$a)[, 1, x] - inv_logit(post_b$a)[, 2, x]})
diff_b
dens(diff_a)
dens(diff_a, lwd = 4)
dens(diff_a, lwd = 4, col = 2)
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 4, col = 1 + i, add = TRUE)}
plot(NULL)
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 4, col = 1 + i, add = TRUE)}
plot(NULL)
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 4, col = 1 + i, add = TRUE)}
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 4, col = 1 + i, add = TRUE)}
plot(NULL, xlim = c(-2, 2), ylim = c(0, 20))
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 4, col = 1 + i, add = TRUE)}
plot(NULL, xlim = c(-0.5, 0.5), ylim = c(0, 20))
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 4, col = 1 + i, add = TRUE)}
diff_b
min(diff_b)
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20))
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 4, col = 1 + i, add = TRUE)}
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"))
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 4, col = 1 + i, add = TRUE)}
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"), xlab = "Gender contrast (by discipline)")
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 4, col = 1 + i, add = TRUE)}
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"), xlab = "Gender contrast (by discipline)")
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 2 + 20*w[i], col = 1 + i, add = TRUE)}
#get proportion of applications that came from each discipline
prop_per_disc <- xtabs(data$applications ~ data$discipline)/sum(data$applications)
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"), xlab = "Gender contrast (by discipline)")
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 2 + 20*prop_per_disc[i], col = 1 + i, add = TRUE)}
abline(v = 0, lty = 3)
#load libraries
library(rethinking)
library(dagitty)
# 1 -----------------------------------------------------------------------
#load data
data("NWOGrants")
#draw and plot DAG
dag <- dagitty("dag {
GE -> DI
GE -> AP
GE -> AW
AP -> AW
DI -> AP
DI -> AW
}")
coordinates(dag) <- list(x = c(GE = 1, DI = 2, AW = 3, AP = 2),
y = c(GE = 2, DI = 1, AW = 2, AP = 3))
plot( dag )
#there are no backdoors for gender, so the total effect requires a basic model
#first let's restructure the data
data <- NWOGrants
data$gender <- ifelse(data$gender == "m", 1 , 2)
data$discipline <- as.numeric(data$discipline)
#reformat data as list of vectors
data_list <- list(awards = data$awards, applications = data$applications, gender = data$gender, discipline = data$discipline)
#run model
model_a <- ulam(
alist(
awards ~ dbinom(applications, p),
logit(p) <- a[gender],
a[gender] ~ dnorm(0, 1.5)
), data = data_list, chains = 4)
#calculate contrast
post_a <- extract.samples(model_a)
diff_a <- inv_logit(post_a$a[,1]) - inv_logit(post_a$a[,2])
dens(diff_a, lwd = 4, col = 2)
precis(diff_a)
#do a posterior check
postcheck <- postcheck(model_a)
# draw lines connecting points from same dept
for(i in 1:length(postcheck$mean)) {
x <- 1 + 2*(i-1)
y1 <- data$awards[x]/data$applications[x]
y2 <- data$awards[x+1]/data$applications[x+1]
lines(c(x, x + 1), c(y1, y2), col = rangi2, lwd = 2)
text(x + 0.5, (y1 + y2)/2 + 0.05, data$discipline[x], cex = 0.8, col = rangi2)
}
#the posterior check is okay but not great...
#on the probability scale it seems like male applicants have 1-5% higher chance of getting an award
# 2 -----------------------------------------------------------------------
#run model that includes discipline
model_b <- ulam(
alist(
awards ~ dbinom(applications, p),
logit(p) <- a[gender, discipline],
matrix[gender, discipline]:a ~ dnorm(0, 1.5)
), data = data_list, chains = 4)
#get total number of applications
total_apps <- sum(data$applications)
#get applications per discipline
apps_per_disc <- sapply(sort(unique(data$discipline)), function(x){sum(data$applications[which(data$discipline == x)])})
#simulate as if all apps were from men
p_men <- link(model_b, data = list(discipline = rep(sort(unique(data$discipline)), times = apps_per_disc),
applications = rep(1, total_apps),
gender = rep(1, total_apps)))
#simulate as if all apps were from women
p_women <- link(model_b, data = list(discipline = rep(sort(unique(data$discipline)), times = apps_per_disc),
applications = rep(1, total_apps),
gender = rep(2, total_apps)))
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2)
#get proportion of applications that came from each discipline
prop_per_disc <- xtabs(data$applications ~ data$discipline)/sum(data$applications)
#calculate and plot contrasts for each discipline weighted by their proportion of applications in the population
post_b <- extract.samples(model_b)
diff_b <- sapply(sort(unique(data$discipline)), function(x){inv_logit(post_b$a)[, 1, x] - inv_logit(post_b$a)[, 2, x]})
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"), xlab = "Gender contrast (by discipline)")
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 2 + 20*prop_per_disc[i], col = 1 + i, add = TRUE)}
abline(v = 0, lty = 3)
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2)
abline(v = 0, lty = 3)
post_a <- extract.samples(model_a)
diff_a <- inv_logit(post_a$a[,1]) - inv_logit(post_a$a[,2])
dens(diff_a, lwd = 4, col = 2)
abline(v = 0, lty = 3)
precis(diff_a)
#calculate contrast
post_a <- extract.samples(model_a)
diff_a <- inv_logit(post_a$a[,2]) - inv_logit(post_a$a[,1])
dens(diff_a, lwd = 4, col = 2)
abline(v = 0, lty = 3)
precis(diff_a)
#calculate contrast
post_a <- extract.samples(model_a)
post_a
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2)
abline(v = 0, lty = 3)
#calculate and plot contrasts for each discipline weighted by their proportion of applications in the population
post_b <- extract.samples(model_b)
diff_b <- sapply(sort(unique(data$discipline)), function(x){inv_logit(post_b$a)[, 2, x] - inv_logit(post_b$a)[, 2, x]})
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"), xlab = "Gender contrast (by discipline)")
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 2 + 20*prop_per_disc[i], col = 1 + i, add = TRUE)}
abline(v = 0, lty = 3)
diff_b <- sapply(sort(unique(data$discipline)), function(x){inv_logit(post_b$a)[, 2, x] - inv_logit(post_b$a)[, 1, x]})
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"), xlab = "Gender contrast (by discipline)")
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 2 + 20*prop_per_disc[i], col = 1 + i, add = TRUE)}
abline(v = 0, lty = 3)
precis(model_b)
precis(model_b, depth = 2)
precis(model_b, depth = 3)
p_women - p_men
median(p_women - p_men)
median(p_women - p_men)
?dens
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2, show.zero = TRUE)
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2, show.zero = TRUE, show.HPDI = TRUE)
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2, show.zero = TRUE, show.HPDI = 0.95)
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2, show.zero = TRUE, show.HPDI = 0.95)
abline(v = median(p_women = p_men), col = 2)
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2, show.zero = TRUE, show.HPDI = 0.95)
abline(v = median(p_women = p_men), col = 2)
abline(v = median(p_women = p_men), lty = 3, col = 2)
median(p_women = p_men)
median(p_women - p_men)
abline(v = median(p_women - p_men), lty = 3, col = 2)
abline(v = median(p_women - p_men), lty = 4, col = 2)
abline(v = median(p_women - p_men), lty = 2, col = 2)
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2, show.HPDI = 0.95)
abline(v = median(p_women - p_men), lty = 2, col = 2)
abline(v = 0, lty = 2, col = 2)
abline(v = 0, lty = 2)
#plot the overall direct effect of gender
dens(p_women - p_men, lwd = 4, col = 2, show.HPDI = 0.95)
abline(v = median(p_women - p_men), lty = 2, col = 2)
abline(v = 0, lty = 2)
dens(p_women - p_men, lwd = 4, col = 2, show.HPDI = 0.95)
abline(v = median(p_women - p_men), lty = 2, col = 2)
abline(v = 0, lty = 2)
dens(diff_a, lwd = 4, col = 2, show.HPDI = 0.95)
abline(median(diff_a), lty = 2, col = 2)
abline(v = median(diff_a), lty = 2, col = 2)
abline(v = 0, lty = 3)
abline(v = 0, lty =2)
post_b <- extract.samples(model_b)
diff_b <- sapply(sort(unique(data$discipline)), function(x){inv_logit(post_b$a)[, 2, x] - inv_logit(post_b$a)[, 1, x]})
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"), xlab = "Gender contrast (by discipline)")
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 2 + 20*prop_per_disc[i], col = 1 + i, add = TRUE)}
abline(v = 0, lty = 3)
#plot the overall direct effect of gender, with 95% HDPI and median shown as red line
dens(p_women - p_men, lwd = 4, col = 2, show.HPDI = 0.95)
abline(v = median(p_women - p_men), lty = 2, col = 2)
abline(v = 0, lty = 2)
post_b <- extract.samples(model_b)
diff_b <- sapply(sort(unique(data$discipline)), function(x){inv_logit(post_b$a)[, 2, x] - inv_logit(post_b$a)[, 1, x]})
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"), xlab = "Gender contrast (by discipline)")
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 2 + 20*prop_per_disc[i], col = 1 + i, add = TRUE)}
abline(v = 0, lty = 3)
#load libraries
library(rethinking)
library(dagitty)
# 1 -----------------------------------------------------------------------
#load data
data("NWOGrants")
#draw and plot DAG
dag <- dagitty("dag {
GE -> DI
GE -> AP
GE -> AW
AP -> AW
DI -> AP
DI -> AW
}")
coordinates(dag) <- list(x = c(GE = 1, DI = 2, AW = 3, AP = 2),
y = c(GE = 2, DI = 1, AW = 2, AP = 3))
plot( dag )
#there are no backdoors for gender, so the total effect requires a basic model
#first let's restructure the data
data <- NWOGrants
data$gender <- ifelse(data$gender == "m", 1 , 2)
data$discipline <- as.numeric(data$discipline)
#reformat data as list of vectors
data_list <- list(awards = data$awards, applications = data$applications, gender = data$gender, discipline = data$discipline)
#run model
model_a <- ulam(
alist(
awards ~ dbinom(applications, p),
logit(p) <- a[gender],
a[gender] ~ dnorm(0, 1.5)
), data = data_list, chains = 4)
#plot the total effect of gender, with 95% HDPI and median shown as red line
post_a <- extract.samples(model_a)
diff_a <- inv_logit(post_a$a[,2]) - inv_logit(post_a$a[,1])
dens(diff_a, lwd = 4, col = 2, show.HPDI = 0.95)
abline(v = median(diff_a), lty = 2, col = 2)
abline(v = 0, lty =2)
precis(diff_a)
#do a posterior check
postcheck <- postcheck(model_a)
# draw lines connecting points from same dept
for(i in 1:length(postcheck$mean)) {
x <- 1 + 2*(i-1)
y1 <- data$awards[x]/data$applications[x]
y2 <- data$awards[x+1]/data$applications[x+1]
lines(c(x, x + 1), c(y1, y2), col = rangi2, lwd = 2)
text(x + 0.5, (y1 + y2)/2 + 0.05, data$discipline[x], cex = 0.8, col = rangi2)
}
#the posterior check is okay but not great...
#on the probability scale it seems like male applicants have 1-5% higher chance of getting an award
# 2 -----------------------------------------------------------------------
#run model that includes discipline
model_b <- ulam(
alist(
awards ~ dbinom(applications, p),
logit(p) <- a[gender, discipline],
matrix[gender, discipline]:a ~ dnorm(0, 1.5)
), data = data_list, chains = 4)
#get total number of applications
total_apps <- sum(data$applications)
#get applications per discipline
apps_per_disc <- sapply(sort(unique(data$discipline)), function(x){sum(data$applications[which(data$discipline == x)])})
#simulate as if all apps were from men
p_men <- link(model_b, data = list(discipline = rep(sort(unique(data$discipline)), times = apps_per_disc),
applications = rep(1, total_apps),
gender = rep(1, total_apps)))
#simulate as if all apps were from women
p_women <- link(model_b, data = list(discipline = rep(sort(unique(data$discipline)), times = apps_per_disc),
applications = rep(1, total_apps),
gender = rep(2, total_apps)))
#plot the direct effect of gender, with 95% HDPI and median shown as red line
dens(p_women - p_men, lwd = 4, col = 2, show.HPDI = 0.95)
abline(v = median(p_women - p_men), lty = 2, col = 2)
abline(v = 0, lty = 2)
#get proportion of applications that came from each discipline
prop_per_disc <- xtabs(data$applications ~ data$discipline)/sum(data$applications)
#calculate and plot contrasts for each discipline weighted by their proportion of applications in the population
post_b <- extract.samples(model_b)
diff_b <- sapply(sort(unique(data$discipline)), function(x){inv_logit(post_b$a)[, 2, x] - inv_logit(post_b$a)[, 1, x]})
plot(NULL, xlim = c(min(diff_b), max(diff_b)), ylim = c(0, 20), ylab = ("Density"), xlab = "Gender contrast (by discipline)")
for(i in sort(unique(data$discipline))){dens(diff_b[, i], lwd = 2 + 20*prop_per_disc[i], col = 1 + i, add = TRUE)}
abline(v = 0, lty = 3)
# 3 -----------------------------------------------------------------------
#it seems as though the average difference between women and men in this sample
#is mostly driven by gender differences in disciplinary affiliations
#(since the gender difference is lower after stratifying by discipline)
#the slight effect of gender difference seen in the second model seems to be
#driven by the fact that the disciplines where women are most disadvantaged also
#submit more applications, as seen in the final plot of contrasts for each
#discipline weighted by the proportion of applications
