ggplot2::geom_bar(stat = "identity") +
ggplot2::theme_linedraw() +
ggplot2::labs(x = "Letter", y = "Frequency", title = "Surnames")
#plot adjusted name data
#ggplot2::ggplot(data = letter_data, ggplot2::aes(x = letter, y = adj_name_freq)) +
#  ggplot2::geom_bar(stat = "identity") +
#  ggplot2::theme_linedraw() +
#  ggplot2::labs(x = "Letter", y = "Adjusted Frequency", title = "Surnames")
rm(list = c("census_names", "breakdown_matrix", "ks_breakdown", "letter_data"))
#load in the checked brands with letters and get the proportion correct
prop_correct <- mean(read.csv("letters_checked.csv")$initials)*100
#load in adjustments from components.xlsx
collapse <- data.table::as.data.table(readxl::read_excel(paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/", "components.xlsx"), sheet = "collapse"))
rotation <- data.table::as.data.table(readxl::read_excel(paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/", "components.xlsx"), sheet = "rotation"))
#reformat rotation
rotation$rot <- strsplit(rotation$rot, ", ")
#store components with commas
components <- stringr::str_pad(rotation$component, width = 3, side = "right", pad = ",")
#print them
components
load("location_data/all_zips.RData")
load("location_data/zip_dists.RData")
brands
all_zips$zip
substr(all_zips$zip, 1, 1)
table(substr(all_zips$zip, 1, 1))
#read in brand data
brands <- read.csv("brand_data.csv")[, -1]
#remove brands with length of 12 (incorrectly specified according to manual inspection)
brands <- brands[-which(nchar(brands$brand) == 12), ]
#substring brand codes into vector of four components and one location
brands$brand <- lapply(1:nrow(brands), function(x){substring(brands$brand[[x]], first = c(1, 4, 7, 10, 13), last = c(3, 6, 9, 12, 13))})
#print a sample
brands[1:10, ]
#move duplicate code (12th position) into the sixth position of the brand vectors
for(x in 1:nrow(brands)){
#if fourth position starts with a comma and ends with a number (or O)
if(substring(brands$brand[[x]][4], 1, 1) == "," & substring(brands$brand[[x]][4], 3) %in% c("O", 0:9)){
#put duplicate number into the sixth position
brands$brand[[x]][6] <- gsub(",", "", brands$brand[[x]][4])
#replace any O with 0
brands$brand[[x]][6] <- gsub("O", 0, brands$brand[[x]][6])
#replace original fourth position with ",,,"
brands$brand[[x]][4] <- ",,,"
}
}
#save
save(brands, file = "raw_brands.RData")
#load in adjustments from components.xlsx
collapse <- data.table::as.data.table(readxl::read_excel(paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/", "components.xlsx"), sheet = "collapse"))
rotation <- data.table::as.data.table(readxl::read_excel(paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/", "components.xlsx"), sheet = "rotation"))
#reformat rotation
rotation$rot <- strsplit(rotation$rot, ", ")
#for each brand
for(i in 1:nrow(brands)){
#check if there are characters that need replacing (either three digit characters like BX1 and QC1 or substringed characters without commas)
temp <- which(brands$brand[[i]][1:4] %in% collapse$from | gsub(",", "", substr(brands$brand[[i]][1:4], 1, 2)) %in% collapse$from)
#and if there are
if(length(temp) > 0){
#go through them
for(j in 1:length(temp)){
#if the full three-digit component is in the data table (so something like BX1, QC1, etc.)
if(brands$brand[[i]][temp[j]] %in% collapse$from){
#store the index of the component
temp_2 <- which(collapse$from == brands$brand[[i]][temp[j]])
#and either replace it without or with rotation
if(collapse$rot[temp_2] == "NA"){
brands$brand[[i]][temp[j]] <- stringr::str_pad(collapse$to[temp_2], width = 3, side = "right", pad = ",")
} else{
brands$brand[[i]][temp[j]] <- paste0(stringr::str_pad(collapse$to[temp_2], width = 2, side = "right", pad = ","), collapse$rot[temp_2])
}
} else{ #if it's less than three digits
#store the index of the component
temp_2 <- which(collapse$from == gsub(",", "", substr(brands$brand[[i]][temp[j]], 1, 2)))
#and either replace it without or with rotation
if(collapse$rot[temp_2] == "NA"){
brands$brand[[i]][temp[j]] <- stringr::str_pad(collapse$to[temp_2], width = 3, side = "right", pad = ",")
} else{
brands$brand[[i]][temp[j]] <- paste0(stringr::str_pad(collapse$to[temp_2], width = 2, side = "right", pad = ","), collapse$rot[temp_2])
}
}
rm(temp_2)
}
}
rm(temp)
}
#for each brand
for(i in 1:nrow(brands)){
#check if there are rotated components
temp <- which(substr(brands$brand[[i]][1:4], 3, 3) %in% c(1:9))
#if there are
if(length(temp) > 0){
#go through them
for(j in 1:length(temp)){
#store the index of the component
temp_2 <- which(rotation$component == gsub(",", "", substr(brands$brand[[i]][temp[j]], 1, 2)))
#store the current angle of rotation
angle <- substr(brands$brand[[i]][temp[j]], 3, 3)
#if the rotated component matches a real component (checking since we haven't removed misspecified components yet)
if(length(temp_2) > 0){
#and the rotation angle is not in the first unique rotation angles for that component
if(!(angle %in% rotation$rot[[temp_2]])){
#and the new rotation is not zero
if(as.numeric(rotation[temp_2, ..angle]) > 0){
#replace the current rotated component with a corrected version
brands$brand[[i]][temp[j]] <- paste0(substr(brands$brand[[i]][temp[j]], 1, 2), as.numeric(rotation[temp_2, ..angle]))
} else{ #if the new rotation is zero
#remove the rotation entirely
brands$brand[[i]][temp[j]] <- paste0(substr(brands$brand[[i]][temp[j]], 1, 2), ",")
}
}
}
rm(list = c("temp_2", "angle"))
}
}
rm(temp)
}
#store components with commas
components <- stringr::str_pad(rotation$component, width = 3, side = "right", pad = ",")
#print them
components
#create empty vectors to fill
all_poss_components <- c()
index_components <- c()
#iterate through components
for(x in 1:length(components)){
#if the component is not rotatable
if(length(which(rotation$rot[[x]] == "NA")) > 0){
#add it without rotation
all_poss_components <- c(all_poss_components, components[x])
index_components <- c(index_components, components[x])
} else{
#add it with rotation
all_poss_components <- c(all_poss_components, components[x], paste0(substr(components[x], 1, 2), rotation$rot[[x]]))
index_components <- c(index_components, components[x], rep(components[x], length(paste0(substr(components[x], 1, 2), rotation$rot[[x]]))))
}
}
#combine new vectors into a data frame and remove old variable
all_poss_components <- data.frame(index = index_components, rot = all_poss_components)
rm(index_components)
#remove all misspecified brands (with components that aren't letters or don't appear in all possible components)
misspecified <- which(sapply(1:nrow(brands), function(x){
length(which(brands$brand[[x]][1:4] %in% c(all_poss_components$rot, ",,,")))
}) != 4)
brands <- brands[-misspecified,]
rm(misspecified)
#get all kansas zip codes
data("zip_code_db", package = "zipcodeR")
zip_code_db <- zip_code_db[which(zip_code_db$state == "KS"), ]
#identify zip codes with missing location data
missing_locations <- which(is.na(zip_code_db$lat))
#add in found locations
found <- read.csv("location_data/missing_zips_found.txt", header = FALSE)
zip_code_db$lat[missing_locations] <- found$V2
zip_code_db$lng[missing_locations] <- found$V3
zip_code_db
#construct all_zips, a data table with zip codes, counties, latitudes, and longitudes
all_zips <- data.table::data.table(zip = as.numeric(zip_code_db$zipcode), county = as.factor(zip_code_db$county), lat = zip_code_db$lat, lon = zip_code_db$lng)
all_zips
#save
save(all_zips, file = "location_data/all_zips.RData")
brands[which(brands$location %in% all_zips$zip), ]
brands[which(brands$location %in% all_zips$zip), ]$location
substr(brands[which(brands$location %in% all_zips$zip), ]$location, 1, 1)
table(substr(brands[which(brands$location %in% all_zips$zip), ]$location, 1, 1))
#subset brands to only include those from kansas
brands <- brands[which(brands$location %in% all_zips$zip), ]
#remove temporary objects
rm(list = c("zip_code_db", "missing_locations", "found"))
load("location_data/all_zips.RData")
load("location_data/zip_dists.RData")
#get concatenated brands with duplicate codes
concat_brands <- sapply(1:nrow(brands), function(x){
#get four components and the duplicate code
temp <- brands$brand[[x]][c(1:4, 6)]
#if duplicate code is missing them remove the NA
if(length(which(is.na(temp))) > 0){
temp <- temp[-which(is.na(temp))]
}
#return a concatenated version
paste0(temp, collapse = "")
})
#build data table to determine which rows are duplicated (accounting for zip code and year)
concat_brands <- data.table::data.table(brand = concat_brands, location = brands$location, year = brands$year)
#remove duplicated rows from the main data table
brands <- brands[-which(duplicated(concat_brands)),]
#remove temporary object
rm(concat_brands)
brands[1:10,]
#create empty matrix for converted brands
converted_brands <- matrix(0, nrow = nrow(brands), ncol = 10)
#append zip codes and years
converted_brands[, 9] <- as.numeric(brands$location)
converted_brands[, 10] <- as.numeric(brands$year)
converted_brands[1:10,]
brands[1:10]
brands[1:10,]
brands[1:20,]
i <- 12
#extract the index numbers of components (ignoring rotation), and replace empty values with 0
brand_nums <- match(all_poss_components$index[match(brands$brand[[i]][1:4], all_poss_components$rot)], components)
brand_nums[is.na(brand_nums)] <- 0
#create empty vector of angles
angle_nums <- rep(0, 4)
#iterate through the components
for(j in 1:length(brand_nums[!is.na(brand_nums)])){
#if the component is not a letter
#check if there are any characters that are different between the actual component and it's index (indicates rotation)
temp <- as.numeric(setdiff(strsplit(all_poss_components$rot[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]],
strsplit(all_poss_components$index[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]]))
#if there are, replace the corresponding 0 in the vector of angles
if(length(temp) > 0){angle_nums[j] <- temp}
}
#store numeric brands and angles in the matrix
converted_brands[i, 1:4] <- brand_nums
converted_brands[i, 5:8] <- angle_nums
converted_brands[i, ]
i <- 19
#extract the index numbers of components (ignoring rotation), and replace empty values with 0
brand_nums <- match(all_poss_components$index[match(brands$brand[[i]][1:4], all_poss_components$rot)], components)
brand_nums[is.na(brand_nums)] <- 0
#create empty vector of angles
angle_nums <- rep(0, 4)
#iterate through the components
for(j in 1:length(brand_nums[!is.na(brand_nums)])){
#if the component is not a letter
#check if there are any characters that are different between the actual component and it's index (indicates rotation)
temp <- as.numeric(setdiff(strsplit(all_poss_components$rot[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]],
strsplit(all_poss_components$index[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]]))
#if there are, replace the corresponding 0 in the vector of angles
if(length(temp) > 0){angle_nums[j] <- temp}
}
#store numeric brands and angles in the matrix
converted_brands[i, 1:4] <- brand_nums
converted_brands[i, 5:8] <- angle_nums
converted_brands[9,]
converted_brands[19,]
brands[19,]
brands[1:20,]
i <- 17
#extract the index numbers of components (ignoring rotation), and replace empty values with 0
brand_nums <- match(all_poss_components$index[match(brands$brand[[i]][1:4], all_poss_components$rot)], components)
brand_nums[is.na(brand_nums)] <- 0
#create empty vector of angles
angle_nums <- rep(0, 4)
#iterate through the components
for(j in 1:length(brand_nums[!is.na(brand_nums)])){
#if the component is not a letter
#check if there are any characters that are different between the actual component and it's index (indicates rotation)
temp <- as.numeric(setdiff(strsplit(all_poss_components$rot[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]],
strsplit(all_poss_components$index[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]]))
#if there are, replace the corresponding 0 in the vector of angles
if(length(temp) > 0){angle_nums[j] <- temp}
}
#store numeric brands and angles in the matrix
converted_brands[i, 1:4] <- brand_nums
converted_brands[i, 5:8] <- angle_nums
converted_brands[i,]
brands[1:50,]
i <- 46
#extract the index numbers of components (ignoring rotation), and replace empty values with 0
brand_nums <- match(all_poss_components$index[match(brands$brand[[i]][1:4], all_poss_components$rot)], components)
brand_nums[is.na(brand_nums)] <- 0
#create empty vector of angles
angle_nums <- rep(0, 4)
#iterate through the components
for(j in 1:length(brand_nums[!is.na(brand_nums)])){
#if the component is not a letter
#check if there are any characters that are different between the actual component and it's index (indicates rotation)
temp <- as.numeric(setdiff(strsplit(all_poss_components$rot[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]],
strsplit(all_poss_components$index[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]]))
#if there are, replace the corresponding 0 in the vector of angles
if(length(temp) > 0){angle_nums[j] <- temp}
}
#store numeric brands and angles in the matrix
converted_brands[i, 1:4] <- brand_nums
converted_brands[i, 5:8] <- angle_nums
converted_brands[i,]
brand_nums
angle_nums
order(brand_nums)
which(brand_nums == 0)
brand_nums[-which(brand_nums == 0)]
order(brand_nums[-which(brand_nums == 0)])
i
#extract the index numbers of components (ignoring rotation), and replace empty values with 0
brand_nums <- match(all_poss_components$index[match(brands$brand[[i]][1:4], all_poss_components$rot)], components)
brand_nums
order(brand_nums)
#extract the index numbers of components (ignoring rotation)
brand_nums <- match(all_poss_components$index[match(brands$brand[[i]][1:4], all_poss_components$rot)], components)
#store eventual numeric order of components
comp_order <- order(brand_nums)
#replace empty values with 0
brand_nums[is.na(brand_nums)] <- 0
#create empty vector of angles
angle_nums <- rep(0, 4)
#iterate through the components
for(j in 1:length(brand_nums[!is.na(brand_nums)])){
#if the component is not a letter
#check if there are any characters that are different between the actual component and it's index (indicates rotation)
temp <- as.numeric(setdiff(strsplit(all_poss_components$rot[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]],
strsplit(all_poss_components$index[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]]))
#if there are, replace the corresponding 0 in the vector of angles
if(length(temp) > 0){angle_nums[j] <- temp}
}
brand_nums
angle_nums
brand_nums[comp_order]
angle_nums[comp_order]
#create empty matrix for converted brands
converted_brands <- matrix(0, nrow = nrow(brands), ncol = 10)
#append zip codes and years
converted_brands[, 9] <- as.numeric(brands$location)
converted_brands[, 10] <- as.numeric(brands$year)
#iterate through the brands
for(i in 1:nrow(brands)){
#extract the index numbers of components (ignoring rotation)
brand_nums <- match(all_poss_components$index[match(brands$brand[[i]][1:4], all_poss_components$rot)], components)
#store eventual numeric order of components
comp_order <- order(brand_nums)
#replace empty values with 0
brand_nums[is.na(brand_nums)] <- 0
#create empty vector of angles
angle_nums <- rep(0, 4)
#iterate through the components
for(j in 1:length(brand_nums[!is.na(brand_nums)])){
#if the component is not a letter
#check if there are any characters that are different between the actual component and it's index (indicates rotation)
temp <- as.numeric(setdiff(strsplit(all_poss_components$rot[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]],
strsplit(all_poss_components$index[match(brands$brand[[i]][j], all_poss_components$rot)], split = "")[[1]]))
#if there are, replace the corresponding 0 in the vector of angles
if(length(temp) > 0){angle_nums[j] <- temp}
}
#store numeric brands and angles in the matrix (components sorted in ascending numeric order, and angles re-ordered accordingly)
converted_brands[i, 1:4] <- brand_nums[comp_order]
converted_brands[i, 5:8] <- angle_nums[comp_order]
#remove temporary objects
rm(list = c("brand_nums", "comp_order", "angle_nums", "temp"))
}
converted_brands
brands[70,]
converted_brands[70,]
#rewrite brands and remove original brands
brands <- converted_brands
rm(converted_brands)
#save
save(brands, file = "converted_brands.RData")
brands[1:10,]
load("converted_brands.RData")
brands[1:10,]
table(sapply(1:nrow(brands), function(x){length(which(brands[x, 1:4] != 0))}))
#create data table of counties
counties <- tigris::list_counties("KS")
counties <- data.table::data.table(county = counties$county, quadrant = rep(NA, nrow(counties)))
#NW counties
counties$quadrant[which(counties$county %in% c("Cheyenne", "Rawlins", "Decatur",
"Norton", "Phillips", "Smith",
"Sherman", "Thomas", "Sheridan",
"Graham", "Rooks", "Osborne",
"Wallace", "Logan", "Gove",
"Trego", "Ellis", "Russell"))] <- "NW"
#SW counties
counties$quadrant[which(counties$county %in% c("Greeley", "Wichita", "Scott",
"Lane", "Ness", "Rush", "Barton",
"Hamilton", "Kearny", "Finney",
"Hodgeman", "Pawnee", "Stafford",
"Stanton", "Grant", "Haskell",
"Gray", "Ford", "Edwards",
"Kiowa", "Pratt", "Morton",
"Stevens", "Seward", "Meade",
"Clark", "Comanche", "Barber"))] <- "SW"
#NE counties
counties$quadrant[which(counties$county %in% c("Jewell", "Republic",
"Washington", "Marshall",
"Nemaha", "Brown", "Doniphan",
"Mitchell", "Cloud", "Clay",
"Riley", "Pottawatomie",
"Jackson", "Atchison",
"Jefferson", "Leavenworth",
"Wyandotte", "Lincoln", "Ottawa",
"Ellsworth", "Saline",
"Dickinson", "Geary", "Morris",
"Wabaunsee", "Shawnee", "Osage",
"Douglas", "Franklin", "Johnson",
"Miami"))] <- "NE"
#SE counties
counties$quadrant[which(counties$county %in% c("Rice", "McPherson", "Marion",
"Chase", "Lyon", "Coffey",
"Anderson", "Linn", "Reno",
"Harvey", "Kingman", "Sedgwick",
"Butler", "Greenwood", "Woodson",
"Allen", "Bourbon", "Elk",
"Wilson", "Neosho", "Crawford",
"Harper", "Sumner", "Cowley",
"Chautauqua", "Montgomery",
"Labette", "Cherokee"))] <- "SE"
#add zip codes to data table
data("zip_code_db", package = "zipcodeR")
counties$zip <- lapply(1:nrow(counties), function(x){zipcodeR::search_county(counties$county[x], state_abb = "KS")$zipcode})
#create a thesaurus of which zip codes are in which quadrants
quad_inds <- c()
quad_zips <- c()
for(i in 1:nrow(counties)){
quad_inds <- c(quad_inds, rep(counties$quadrant[i], length(counties$zip[[i]])))
quad_zips <- c(quad_zips, counties$zip[[i]])
}
quad_thes <- data.frame(quadrant = quad_inds, zip = quad_zips)
rm(list = c("quad_inds", "quad_zips"))
#get quadrant for each brand in the dataset
brands_quadrants <- quad_thes$quadrant[match(brands[, 9], quad_thes$zip)]
#get number of components per brand
n_components <- sapply(1:nrow(brands), function(x){4 - length(which(brands[x, 1:4] == 0))})
#get number of two- and three-component brand that are unique to 1990 (old) or unique to the later years (young)
#first, for each unique brand code (discounting location), we need the years in which it appears
concat_brands <- as.factor(sapply(1:nrow(brands), function(x){paste0(brands[x, 1:8], collapse = " ")}))
unique_concat_brands <- levels(concat_brands)
years_appear <- lapply(unique_concat_brands, function(x){unique(brands[which(concat_brands == x), 10])})
#now, we can get which brands are either only old or only young
which_old <- sapply(1:length(concat_brands), function(x){all(years_appear[[which(unique_concat_brands == concat_brands[x])]] == 1990)})
which_young <- sapply(1:length(concat_brands), function(x){all(years_appear[[which(unique_concat_brands == concat_brands[x])]] != 1990)})
#what percent of component types are singletons
all_components <- c(brands[, 1:4])
all_components <- all_components[-which(all_components == 0)]
percent_singleton <- round((length(which(as.numeric(table(all_components)) == 1))/length(as.numeric(table(all_components))))*100, 2)
which_old
which_young
which_old
#create function for removing singletons from subset
singleton_removal <- function(matrix){
to_remove <- which(sapply(1:nrow(matrix), function(x){length(which(matrix[x, 1:4] %in% as.numeric(names(which(table(c(matrix[, 1:4])) == 1))))) > 0}))
return(matrix[-to_remove, ])
}
#set random seed
set.seed(12345)
#create structured and mixed datasets
o_ne_2 <- brands[which(which_old & brands_quadrants == "NE" & n_components == 2), ]
o_ne_2_mixed <- brands[sample(which(brands_quadrants == "NE" & n_components == 2), nrow(o_ne_2)), ]
o_ne_3 <- brands[which(which_old & brands_quadrants == "NE" & n_components == 3), ]
o_ne_3_mixed <- brands[sample(which(brands_quadrants == "NE" & n_components == 3), nrow(o_ne_3)), ]
y_ne_2 <- brands[which(which_young & brands_quadrants == "NE" & n_components == 2), ]
y_ne_2_mixed <- brands[sample(which(brands_quadrants == "NE" & n_components == 2), nrow(y_ne_2)), ]
y_ne_3 <- brands[which(which_young & brands_quadrants == "NE" & n_components == 3), ]
y_ne_3_mixed <- brands[sample(which(brands_quadrants == "NE" & n_components == 3), nrow(y_ne_3)), ]
o_nw_2 <- brands[which(which_old & brands_quadrants == "NW" & n_components == 2), ]
o_nw_2_mixed <- brands[sample(which(brands_quadrants == "NW" & n_components == 2), nrow(o_nw_2)), ]
o_nw_3 <- brands[which(which_old & brands_quadrants == "NW" & n_components == 3), ]
o_nw_3_mixed <- brands[sample(which(brands_quadrants == "NW" & n_components == 3), nrow(o_nw_3)), ]
y_nw_2 <- brands[which(which_young & brands_quadrants == "NW" & n_components == 2), ]
y_nw_2_mixed <- brands[sample(which(brands_quadrants == "NW" & n_components == 2), nrow(y_nw_2)), ]
y_nw_3 <- brands[which(which_young & brands_quadrants == "NW" & n_components == 3), ]
y_nw_3_mixed <- brands[sample(which(brands_quadrants == "NW" & n_components == 3), nrow(y_nw_3)), ]
o_se_2 <- brands[which(which_old & brands_quadrants == "SE" & n_components == 2), ]
o_se_2_mixed <- brands[sample(which(brands_quadrants == "SE" & n_components == 2), nrow(o_se_2)), ]
o_se_3 <- brands[which(which_old & brands_quadrants == "SE" & n_components == 3), ]
o_se_3_mixed <- brands[sample(which(brands_quadrants == "SE" & n_components == 3), nrow(o_se_3)), ]
y_se_2 <- brands[which(which_young & brands_quadrants == "SE" & n_components == 2), ]
y_se_2_mixed <- brands[sample(which(brands_quadrants == "SE" & n_components == 2), nrow(y_se_2)), ]
y_se_3 <- brands[which(which_young & brands_quadrants == "SE" & n_components == 3), ]
y_se_3_mixed <- brands[sample(which(brands_quadrants == "SE" & n_components == 3), nrow(y_se_3)), ]
o_sw_2 <- brands[which(which_old & brands_quadrants == "SW" & n_components == 2), ]
o_sw_2_mixed <- brands[sample(which(brands_quadrants == "SW" & n_components == 2), nrow(o_sw_2)), ]
o_sw_3 <- brands[which(which_old & brands_quadrants == "SW" & n_components == 3), ]
o_sw_3_mixed <- brands[sample(which(brands_quadrants == "SW" & n_components == 3), nrow(o_sw_3)), ]
y_sw_2 <- brands[which(which_young & brands_quadrants == "SW" & n_components == 2), ]
y_sw_2_mixed <- brands[sample(which(brands_quadrants == "SW" & n_components == 2), nrow(y_sw_2)), ]
y_sw_3 <- brands[which(which_young & brands_quadrants == "SW" & n_components == 3), ]
y_sw_3_mixed <- brands[sample(which(brands_quadrants == "SW" & n_components == 3), nrow(y_sw_3)), ]
# #remove singletons from all of these
# o_ne_2 <- singleton_removal(o_ne_2)
# o_ne_2_mixed <- singleton_removal(o_ne_2_mixed)
# o_ne_3 <- singleton_removal(o_ne_3)
# o_ne_3_mixed <- singleton_removal(o_ne_3_mixed)
# y_ne_2 <- singleton_removal(y_ne_2)
# y_ne_2_mixed <- singleton_removal(y_ne_2_mixed)
# y_ne_3 <- singleton_removal(y_ne_3)
# y_ne_3_mixed <- singleton_removal(y_ne_3_mixed)
# o_nw_2 <- singleton_removal(o_nw_2)
# o_nw_2_mixed <- singleton_removal(o_nw_2_mixed)
# o_nw_3 <- singleton_removal(o_nw_3)
# o_nw_3_mixed <- singleton_removal(o_nw_3_mixed)
# y_nw_2 <- singleton_removal(y_nw_2)
# y_nw_2_mixed <- singleton_removal(y_nw_2_mixed)
# y_nw_3 <- singleton_removal(y_nw_3)
# y_nw_3_mixed <- singleton_removal(y_nw_3_mixed)
# o_se_2 <- singleton_removal(o_se_2)
# o_se_2_mixed <- singleton_removal(o_se_2_mixed)
# o_se_3 <- singleton_removal(o_se_3)
# o_se_3_mixed <- singleton_removal(o_se_3_mixed)
# y_se_2 <- singleton_removal(y_se_2)
# y_se_2_mixed <- singleton_removal(y_se_2_mixed)
# y_se_3 <- singleton_removal(y_se_3)
# y_se_3_mixed <- singleton_removal(y_se_3_mixed)
# o_sw_2 <- singleton_removal(o_sw_2)
# o_sw_2_mixed <- singleton_removal(o_sw_2_mixed)
# o_sw_3 <- singleton_removal(o_sw_3)
# o_sw_3_mixed <- singleton_removal(o_sw_3_mixed)
# y_sw_2 <- singleton_removal(y_sw_2)
# y_sw_2_mixed <- singleton_removal(y_sw_2_mixed)
# y_sw_3 <- singleton_removal(y_sw_3)
# y_sw_3_mixed <- singleton_removal(y_sw_3_mixed)
#save structured and mixed datasets
subsets <- list(o_ne_2 = o_ne_2, o_ne_2_mixed = o_ne_2_mixed, o_ne_3 = o_ne_3, o_ne_3_mixed = o_ne_3_mixed,
y_ne_2 = y_ne_2, y_ne_2_mixed = y_ne_2_mixed, y_ne_3 = y_ne_3, y_ne_3_mixed = y_ne_3_mixed,
o_nw_2 = o_nw_2, o_nw_2_mixed = o_nw_2_mixed, o_nw_3 = o_nw_3, o_nw_3_mixed = o_nw_3_mixed,
y_nw_2 = y_nw_2, y_nw_2_mixed = y_nw_2_mixed, y_nw_3 = y_nw_3, y_nw_3_mixed = y_nw_3_mixed,
o_se_2 = o_se_2, o_se_2_mixed = o_se_2_mixed, o_se_3 = o_se_3, o_se_3_mixed = o_se_3_mixed,
y_se_2 = y_se_2, y_se_2_mixed = y_se_2_mixed, y_se_3 = y_se_3, y_se_3_mixed = y_se_3_mixed,
o_sw_2 = o_sw_2, o_sw_2_mixed = o_sw_2_mixed, o_sw_3 = o_sw_3, o_sw_3_mixed = o_sw_3_mixed,
y_sw_2 = y_sw_2, y_sw_2_mixed = y_sw_2_mixed, y_sw_3 = y_sw_3, y_sw_3_mixed = y_sw_3_mixed)
save(subsets, file = "analysis/subsets.RData")
brands
