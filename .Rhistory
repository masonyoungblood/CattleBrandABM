max_dist <- ceiling(max(zip_dists))
#set priors
priors <- data.frame(complexity = rgamma(nsim, shape = 0.9, rate = 0.2),
copy_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
dist_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
copy_strength = rexp(nsim, rate = 0.5),
dist_strength = rexp(nsim, rate = 0.5))
#complexity: prior for lambda of poisson drawn from gamma with shape of 0.9 and rate of 0.2
#yields a median of 3 and maximum of 80
#test <- rgamma(10000000, shape = 0.9, rate = 0.2)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#simulate 1000 poissons from gamma with these specifications
#pois_example <- data.frame(n_comps = rep(c(1, 2, 3, 4), 1000),
#                           probs = c(unlist(lapply(1:1000, function(x){BBmisc::normalize(dpois(c(1, 2, 3, 4), rgamma(1, shape = 0.9, rate = 0.2)), "range")}))),
#                           run = unlist(lapply(1:1000, function(x){rep(x, 4)})))
#plot simulated poissons
#ggplot2::ggplot(data = pois_example, ggplot2::aes(x = n_comps, y = probs, group = as.factor(run))) +
#  ggplot2::geom_line(alpha = 0.05, show.legend = FALSE) +
#  ggplot2::labs(x = "Number of Components", y = "Normalized Probabilities") +
#  ggplot2::theme_linedraw()
#copy and dist strength: exponential distribution with rate of 0.5
#test <- rexp(200000, 0.5)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#get vector of observed summary statistics
obs_sum_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
# components_only <- mclapply(1:nsim, function(x){cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
#                                                                init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
#                                                                rot_prob, complexity = priors$complexity[x], copy_radius = priors$copy_radius[x],
#                                                                copy_strength = priors$copy_strength[x], dist_radius = priors$dist_radius[x],
#                                                                dist_strength = priors$dist_strength[x], angles = FALSE, edit_dist_prop = 0.1)}, mc.cores = detectCores()-1)
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = priors$complexity[1], copy_radius = priors$copy_radius[1],
copy_strength = priors$copy_strength[1], dist_radius = priors$dist_radius[1],
dist_strength = priors$dist_strength[1], angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
zip_dists_names <- colnames(zip_dists)
zip_dists_names
zip = 67871
zip
which(zip_dists_names == zip)
zip_dists[, which(zip_dists_names == zip)]
which(zip_dists[, which(zip_dists_names == zip)] <= 200)
which(zip_dists[, which(zip_dists_names == zip)] <= 200)
zip_dists_names[which(zip_dists[, which(zip_dists_names == zip)] <= 200), ]
zip_dists_names[which(zip_dists[, which(zip_dists_names == zip)] <= 200)]
zip_dists_names[which(zip_dists[, which(zip_dists_names == zip)] <= 200)]
zip_dists_names[which(zip_dists[, which(zip_dists_names == zip)] <= 200), ]
zip_dists_names[which(zip_dists[, which(zip_dists_names == zip)] <= 200), ]
zip_dists_names[which(zip_dists[, which(zip_dists_names == zip)] <= 200)]
source("cattlebrandABM.R")
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
source("cattlebrandABM.R")
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
#set working directory, load data, source code, libraries
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
load("location_data/zip_dists.RData")
source("cattlebrandABM.R")
library(parallel)
#probability of rotation (proportion of rotated brands)
rot_prob <- as.numeric(1-(table(brands[, 5:8])[1]/sum(table(brands[, 5:8]))))
#separate brands data by year
brands_1990 <- data.table::data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table::data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table::data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table::data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table::data.table(brands[which(brands[, 10] == 2016), 1:9])
#average number of new brands and old brands per year
n_new <- mean(c((nrow(data.table::fsetdiff(brands_2008, brands_1990))/18),
(nrow(data.table::fsetdiff(brands_2014, brands_2008))/6),
nrow(data.table::fsetdiff(brands_2015, brands_2014)),
nrow(data.table::fsetdiff(brands_2016, brands_2015))))
n_old <- mean(c((nrow(data.table::fsetdiff(brands_1990, brands_2008))/18),
(nrow(data.table::fsetdiff(brands_2008, brands_2014))/6),
nrow(data.table::fsetdiff(brands_2014, brands_2015)),
nrow(data.table::fsetdiff(brands_2015, brands_2016))))
#number of simulations
nsim <- 100
#get minimum and maximum distances in data
min_dist <- ceiling(min(zip_dists[which(zip_dists != 0)]))
max_dist <- ceiling(max(zip_dists))
#set priors
priors <- data.frame(complexity = rgamma(nsim, shape = 0.9, rate = 0.2),
copy_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
dist_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
copy_strength = rexp(nsim, rate = 0.5),
dist_strength = rexp(nsim, rate = 0.5))
#complexity: prior for lambda of poisson drawn from gamma with shape of 0.9 and rate of 0.2
#yields a median of 3 and maximum of 80
#test <- rgamma(10000000, shape = 0.9, rate = 0.2)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#simulate 1000 poissons from gamma with these specifications
#pois_example <- data.frame(n_comps = rep(c(1, 2, 3, 4), 1000),
#                           probs = c(unlist(lapply(1:1000, function(x){BBmisc::normalize(dpois(c(1, 2, 3, 4), rgamma(1, shape = 0.9, rate = 0.2)), "range")}))),
#                           run = unlist(lapply(1:1000, function(x){rep(x, 4)})))
#plot simulated poissons
#ggplot2::ggplot(data = pois_example, ggplot2::aes(x = n_comps, y = probs, group = as.factor(run))) +
#  ggplot2::geom_line(alpha = 0.05, show.legend = FALSE) +
#  ggplot2::labs(x = "Number of Components", y = "Normalized Probabilities") +
#  ggplot2::theme_linedraw()
#copy and dist strength: exponential distribution with rate of 0.5
#test <- rexp(200000, 0.5)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#get vector of observed summary statistics
obs_sum_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
# components_only <- mclapply(1:nsim, function(x){cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
#                                                                init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
#                                                                rot_prob, complexity = priors$complexity[x], copy_radius = priors$copy_radius[x],
#                                                                copy_strength = priors$copy_strength[x], dist_radius = priors$dist_radius[x],
#                                                                dist_strength = priors$dist_strength[x], angles = FALSE, edit_dist_prop = 0.1)}, mc.cores = detectCores()-1)
init_brands <- as.matrix(brands_1990)
mode(init_brands) <- "integer"
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
#set working directory, load data, source code, libraries
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
load("location_data/zip_dists.RData")
source("cattlebrandABM.R")
library(parallel)
#probability of rotation (proportion of rotated brands)
rot_prob <- as.numeric(1-(table(brands[, 5:8])[1]/sum(table(brands[, 5:8]))))
#separate brands data by year
brands_1990 <- data.table::data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table::data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table::data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table::data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table::data.table(brands[which(brands[, 10] == 2016), 1:9])
#average number of new brands and old brands per year
n_new <- mean(c((nrow(data.table::fsetdiff(brands_2008, brands_1990))/18),
(nrow(data.table::fsetdiff(brands_2014, brands_2008))/6),
nrow(data.table::fsetdiff(brands_2015, brands_2014)),
nrow(data.table::fsetdiff(brands_2016, brands_2015))))
n_old <- mean(c((nrow(data.table::fsetdiff(brands_1990, brands_2008))/18),
(nrow(data.table::fsetdiff(brands_2008, brands_2014))/6),
nrow(data.table::fsetdiff(brands_2014, brands_2015)),
nrow(data.table::fsetdiff(brands_2015, brands_2016))))
#number of simulations
nsim <- 100
#get minimum and maximum distances in data
min_dist <- ceiling(min(zip_dists[which(zip_dists != 0)]))
max_dist <- ceiling(max(zip_dists))
#set priors
priors <- data.frame(complexity = rgamma(nsim, shape = 0.9, rate = 0.2),
copy_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
dist_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
copy_strength = rexp(nsim, rate = 0.5),
dist_strength = rexp(nsim, rate = 0.5))
#complexity: prior for lambda of poisson drawn from gamma with shape of 0.9 and rate of 0.2
#yields a median of 3 and maximum of 80
#test <- rgamma(10000000, shape = 0.9, rate = 0.2)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#simulate 1000 poissons from gamma with these specifications
#pois_example <- data.frame(n_comps = rep(c(1, 2, 3, 4), 1000),
#                           probs = c(unlist(lapply(1:1000, function(x){BBmisc::normalize(dpois(c(1, 2, 3, 4), rgamma(1, shape = 0.9, rate = 0.2)), "range")}))),
#                           run = unlist(lapply(1:1000, function(x){rep(x, 4)})))
#plot simulated poissons
#ggplot2::ggplot(data = pois_example, ggplot2::aes(x = n_comps, y = probs, group = as.factor(run))) +
#  ggplot2::geom_line(alpha = 0.05, show.legend = FALSE) +
#  ggplot2::labs(x = "Number of Components", y = "Normalized Probabilities") +
#  ggplot2::theme_linedraw()
#copy and dist strength: exponential distribution with rate of 0.5
#test <- rexp(200000, 0.5)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#get vector of observed summary statistics
obs_sum_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
# components_only <- mclapply(1:nsim, function(x){cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
#                                                                init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
#                                                                rot_prob, complexity = priors$complexity[x], copy_radius = priors$copy_radius[x],
#                                                                copy_strength = priors$copy_strength[x], dist_radius = priors$dist_radius[x],
#                                                                dist_strength = priors$dist_strength[x], angles = FALSE, edit_dist_prop = 0.1)}, mc.cores = detectCores()-1)
init_brands <- as.matrix(brands_1990)
mode(init_brands) <- "integer"
start <- Sys.time()
cattlebrandABM(init_brands = init_brands, components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
start <- Sys.time()
cattlebrandABM(init_brands = init_brands, components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
#set working directory, load data, source code, libraries
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
load("location_data/zip_dists.RData")
source("cattlebrandABM.R")
library(parallel)
#probability of rotation (proportion of rotated brands)
rot_prob <- as.numeric(1-(table(brands[, 5:8])[1]/sum(table(brands[, 5:8]))))
#separate brands data by year
brands_1990 <- data.table::data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table::data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table::data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table::data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table::data.table(brands[which(brands[, 10] == 2016), 1:9])
#average number of new brands and old brands per year
n_new <- mean(c((nrow(data.table::fsetdiff(brands_2008, brands_1990))/18),
(nrow(data.table::fsetdiff(brands_2014, brands_2008))/6),
nrow(data.table::fsetdiff(brands_2015, brands_2014)),
nrow(data.table::fsetdiff(brands_2016, brands_2015))))
n_old <- mean(c((nrow(data.table::fsetdiff(brands_1990, brands_2008))/18),
(nrow(data.table::fsetdiff(brands_2008, brands_2014))/6),
nrow(data.table::fsetdiff(brands_2014, brands_2015)),
nrow(data.table::fsetdiff(brands_2015, brands_2016))))
#number of simulations
nsim <- 100
#get minimum and maximum distances in data
min_dist <- ceiling(min(zip_dists[which(zip_dists != 0)]))
max_dist <- ceiling(max(zip_dists))
#set priors
priors <- data.frame(complexity = rgamma(nsim, shape = 0.9, rate = 0.2),
copy_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
dist_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
copy_strength = rexp(nsim, rate = 0.5),
dist_strength = rexp(nsim, rate = 0.5))
#complexity: prior for lambda of poisson drawn from gamma with shape of 0.9 and rate of 0.2
#yields a median of 3 and maximum of 80
#test <- rgamma(10000000, shape = 0.9, rate = 0.2)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#simulate 1000 poissons from gamma with these specifications
#pois_example <- data.frame(n_comps = rep(c(1, 2, 3, 4), 1000),
#                           probs = c(unlist(lapply(1:1000, function(x){BBmisc::normalize(dpois(c(1, 2, 3, 4), rgamma(1, shape = 0.9, rate = 0.2)), "range")}))),
#                           run = unlist(lapply(1:1000, function(x){rep(x, 4)})))
#plot simulated poissons
#ggplot2::ggplot(data = pois_example, ggplot2::aes(x = n_comps, y = probs, group = as.factor(run))) +
#  ggplot2::geom_line(alpha = 0.05, show.legend = FALSE) +
#  ggplot2::labs(x = "Number of Components", y = "Normalized Probabilities") +
#  ggplot2::theme_linedraw()
#copy and dist strength: exponential distribution with rate of 0.5
#test <- rexp(200000, 0.5)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#get vector of observed summary statistics
obs_sum_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
# components_only <- mclapply(1:nsim, function(x){cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
#                                                                init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
#                                                                rot_prob, complexity = priors$complexity[x], copy_radius = priors$copy_radius[x],
#                                                                copy_strength = priors$copy_strength[x], dist_radius = priors$dist_radius[x],
#                                                                dist_strength = priors$dist_strength[x], angles = FALSE, edit_dist_prop = 0.1)}, mc.cores = detectCores()-1)
start <- Sys.time()
cattlebrandABM(init_brands = init_brands, components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
#set working directory, load data, source code, libraries
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
load("location_data/zip_dists.RData")
source("cattlebrandABM.R")
library(parallel)
#probability of rotation (proportion of rotated brands)
rot_prob <- as.numeric(1-(table(brands[, 5:8])[1]/sum(table(brands[, 5:8]))))
#separate brands data by year
brands_1990 <- data.table::data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table::data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table::data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table::data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table::data.table(brands[which(brands[, 10] == 2016), 1:9])
#average number of new brands and old brands per year
n_new <- mean(c((nrow(data.table::fsetdiff(brands_2008, brands_1990))/18),
(nrow(data.table::fsetdiff(brands_2014, brands_2008))/6),
nrow(data.table::fsetdiff(brands_2015, brands_2014)),
nrow(data.table::fsetdiff(brands_2016, brands_2015))))
n_old <- mean(c((nrow(data.table::fsetdiff(brands_1990, brands_2008))/18),
(nrow(data.table::fsetdiff(brands_2008, brands_2014))/6),
nrow(data.table::fsetdiff(brands_2014, brands_2015)),
nrow(data.table::fsetdiff(brands_2015, brands_2016))))
#number of simulations
nsim <- 100
#get minimum and maximum distances in data
min_dist <- ceiling(min(zip_dists[which(zip_dists != 0)]))
max_dist <- ceiling(max(zip_dists))
#set priors
priors <- data.frame(complexity = rgamma(nsim, shape = 0.9, rate = 0.2),
copy_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
dist_radius = sample(c(min_dist:max_dist), nsim, replace = TRUE),
copy_strength = rexp(nsim, rate = 0.5),
dist_strength = rexp(nsim, rate = 0.5))
#complexity: prior for lambda of poisson drawn from gamma with shape of 0.9 and rate of 0.2
#yields a median of 3 and maximum of 80
#test <- rgamma(10000000, shape = 0.9, rate = 0.2)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#simulate 1000 poissons from gamma with these specifications
#pois_example <- data.frame(n_comps = rep(c(1, 2, 3, 4), 1000),
#                           probs = c(unlist(lapply(1:1000, function(x){BBmisc::normalize(dpois(c(1, 2, 3, 4), rgamma(1, shape = 0.9, rate = 0.2)), "range")}))),
#                           run = unlist(lapply(1:1000, function(x){rep(x, 4)})))
#plot simulated poissons
#ggplot2::ggplot(data = pois_example, ggplot2::aes(x = n_comps, y = probs, group = as.factor(run))) +
#  ggplot2::geom_line(alpha = 0.05, show.legend = FALSE) +
#  ggplot2::labs(x = "Number of Components", y = "Normalized Probabilities") +
#  ggplot2::theme_linedraw()
#copy and dist strength: exponential distribution with rate of 0.5
#test <- rexp(200000, 0.5)
#hist(test, breaks = 100)
#median(test)
#min(test)
#max(test)
#get vector of observed summary statistics
obs_sum_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
# components_only <- mclapply(1:nsim, function(x){cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
#                                                                init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
#                                                                rot_prob, complexity = priors$complexity[x], copy_radius = priors$copy_radius[x],
#                                                                copy_strength = priors$copy_strength[x], dist_radius = priors$dist_radius[x],
#                                                                dist_strength = priors$dist_strength[x], angles = FALSE, edit_dist_prop = 0.1)}, mc.cores = detectCores()-1)
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
source("cattlebrandABM.R")
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
source("cattlebrandABM.R")
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
c(1, 1, 3, 4, 1, 1, 2)
count(c(1, 1, 3, 4, 1, 1, 2))
count(c(1, 1, 3, 4, 1, 1, 2))
Hmisc::count(c(1, 1, 3, 4, 1, 1, 2))
Rfast::transpose()
source("cattlebrandABM.R")
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
source("cattlebrandABM.R")
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
start <- Sys.time()
cattlebrandABM(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
require(compiler)
getCompilerOption("optimize")
enableJIT(1)
is.compile <- function(func){
if(class(func) != "function") stop("You need to enter a function")
last_2_lines <- tail(capture.output(func),2)
any(grepl("bytecode:", last_2_lines))
}
cattlebrandABMcomp <- cmpfun(cattlebrandABM)
is.compile(cattlebrandABM)
start <- Sys.time()
cattlebrandABMcomp(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = priors$complexity[1], copy_radius = priors$copy_radius[1],
copy_strength = priors$copy_strength[1], dist_radius = priors$dist_radius[1],
dist_strength = priors$dist_strength[1], angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
start <- Sys.time()
cattlebrandABMcomp(init_brands = as.matrix(brands_1990), components, all_zips, zip_dists,
init_year = 1990, sampling_years = c(2008, 2014, 2015, 2016), n_new, n_old,
rot_prob, complexity = 3, copy_radius = 200,
copy_strength = 1, dist_radius = 100,
dist_strength = 1, angles = FALSE, edit_dist_prop = 0.1)
Sys.time() - start
brands[, 9]
microbenchmark(brands[, 9], times = 1000)
microbenchmark::microbenchmark(brands[, 9], times = 1000)
install.packages("microbenchmark")
microbenchmark::microbenchmark(brands[, 9], times = 1000)
microbenchmark::microbenchmark(brands[, 9], times = 10000)
microbenchmark::microbenchmark(brands[, 9], .subset2(brands, 11), times = 10000)
brands[, 9]
.subset2(brands, 9)
.subset2(brands, 1)
.subset2(brands, 2)
.subset2(brands, 9)
.subset2(brands)[9]
.subset2(brands, 9L)
brands
?.subset2
.subset2(brands, [9])
.subset2(brands, 9)
.subset2(brands, 9:10)
.subset2(as.data.frame(brands), 9)
microbenchmark::microbenchmark(brands[, 9], .subset2(as.data.frame(brands), 9), times = 10000)
microbenchmark::microbenchmark(as.data.frame(brands)[, 9], .subset2(as.data.frame(brands), 9), times = 1000)
