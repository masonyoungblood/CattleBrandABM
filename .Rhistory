assign(names(main_simulations$priors)[i], plot)
}
#combine plots and print to file
#png("analysis/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
#dev.off()
xlabs <- c("Complexity", "Copy Radius", "Dist Radius", "Copy Strength", "Dist Strength")
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
group_colors <- c("0" = "black", "1" = "red", "2" = "blue", "3" = "green", "4" = "purple", "5" = "orange")
for(i in 1:ncol(main_simulations$priors)){
prior <- data.frame(value = density(main_simulations$priors[, i])$x, density = density(main_simulations$priors[, i])$y, id = 0, lt = 1)
posterior <- do.call(rbind, lapply(1:length(abc_rej_predictions), function(x){
data.frame(value = density(abc_rej_predictions[[x]]$unadj.values[, i])$x, density = density(abc_rej_predictions[[x]]$unadj.values[, i])$y, id = x, lt = 0)
}))
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, color = as.factor(id), linetype = as.factor(lt))) +
xlab(xlabs[i]) + ylab("Density") + xlim(xlims[[i]]) +
theme_linedraw() + theme(axis.title.x = ggtext::element_markdown()) +
scale_color_manual(values = group_colors, name = "Tolerance", labels = c("Prior", tols), guide = guide_legend(override.aes = list(linetype = c(2, 1, 1, 1, 1, 1)))) +
guides(linetype = "none")
assign(names(main_simulations$priors)[i], plot)
}
#combine plots and print to file
#png("analysis/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
#dev.off()
png("analysis/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
dev.off()
abc_rej_predictions <- list()
abc_rej_predictions <- mclapply(1:length(tols), function(x){
abc(target = obs_stats, param = main_simulations$priors, sumstat = sum_stats, method = "rejection",
tol = tols[x], logit.bounds = logit_bounds)
}, mc.cores = 5)
names(abc_rej_predictions) <- tols
save(abc_rej_predictions, file = "analysis/abc_rej_predictions.RData")
xlabs <- c("Complexity", "Copy Radius", "Dist Radius", "Copy Strength", "Dist Strength")
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
group_colors <- c("0" = "black", "1" = "red", "2" = "blue", "3" = "green", "4" = "purple", "5" = "orange")
for(i in 1:ncol(main_simulations$priors)){
prior <- data.frame(value = density(main_simulations$priors[, i])$x, density = density(main_simulations$priors[, i])$y, id = 0, lt = 1)
posterior <- do.call(rbind, lapply(1:length(abc_rej_predictions), function(x){
data.frame(value = density(abc_rej_predictions[[x]]$unadj.values[, i])$x, density = density(abc_rej_predictions[[x]]$unadj.values[, i])$y, id = x, lt = 0)
}))
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, color = as.factor(id), linetype = as.factor(lt))) +
xlab(xlabs[i]) + ylab("Density") + xlim(xlims[[i]]) +
theme_linedraw() + theme(axis.title.x = ggtext::element_markdown()) +
scale_color_manual(values = group_colors, name = "Tolerance", labels = c("Prior", tols), guide = guide_legend(override.aes = list(linetype = c(2, 1, 1, 1, 1, 1)))) +
guides(linetype = "none")
assign(names(main_simulations$priors)[i], plot)
}
#combine plots and print to file
#png("analysis/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
#dev.off()
abc_rej_predictions <- list()
abc_rej_predictions <- mclapply(1:length(tols), function(x){
abc(target = obs_stats, param = main_simulations$priors, sumstat = sum_stats, method = "rejection",
tol = tols[x], transf = c("log", "logit", "logit", "log", "log"), logit.bounds = logit_bounds)
}, mc.cores = 5)
names(abc_rej_predictions) <- tols
save(abc_rej_predictions, file = "analysis/abc_rej_predictions.RData")
xlabs <- c("Complexity", "Copy Radius", "Dist Radius", "Copy Strength", "Dist Strength")
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
group_colors <- c("0" = "black", "1" = "red", "2" = "blue", "3" = "green", "4" = "purple", "5" = "orange")
for(i in 1:ncol(main_simulations$priors)){
prior <- data.frame(value = density(main_simulations$priors[, i])$x, density = density(main_simulations$priors[, i])$y, id = 0, lt = 1)
posterior <- do.call(rbind, lapply(1:length(abc_rej_predictions), function(x){
data.frame(value = density(abc_rej_predictions[[x]]$unadj.values[, i])$x, density = density(abc_rej_predictions[[x]]$unadj.values[, i])$y, id = x, lt = 0)
}))
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, color = as.factor(id), linetype = as.factor(lt))) +
xlab(xlabs[i]) + ylab("Density") + xlim(xlims[[i]]) +
theme_linedraw() + theme(axis.title.x = ggtext::element_markdown()) +
scale_color_manual(values = group_colors, name = "Tolerance", labels = c("Prior", tols), guide = guide_legend(override.aes = list(linetype = c(2, 1, 1, 1, 1, 1)))) +
guides(linetype = "none")
assign(names(main_simulations$priors)[i], plot)
}
#combine plots and print to file
png("analysis/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
dev.off()
#load packages
library(data.table)
library(ggplot2)
library(ggfortify)
library(abcrf)
library(EasyABC)
library(abc)
library(tuneRanger)
#set working directory, load data, etc.
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
#setwd(system("pwd", intern = T))
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
source("cattlebrandABM.R")
#modify function from abcrf::densityPlot.regAbcrf for weight extraction
extract_weights <- function(object, obs, training, paral=FALSE, ncores= if(paral) max(detectCores()-1,1) else 1, ...){
x <- obs
mf <- match.call(expand.dots=FALSE)
mf <- mf[1]
mf$formula <- object$formula
mf$data <- training
training <- mf$data
mf[[1L]] <- as.name("model.frame")
mf <- eval(mf, parent.frame() )
mt <- attr(mf, "terms")
resp <- model.response(mf)
obj <- object$model.rf
inbag <- matrix(unlist(obj$inbag.counts, use.names=FALSE), ncol=obj$num.trees, byrow=FALSE)
obj[["origNodes"]] <- predict(obj, training, predict.all=TRUE, num.threads=ncores)$predictions
obj[["origObs"]] <- model.response(mf)
#####################
origObs <- obj$origObs
origNodes <- obj$origNodes
nodes <- predict(obj, x, predict.all=TRUE, num.threads=ncores )$predictions
if(is.null(dim(nodes))) nodes <- matrix(nodes, nrow=1)
ntree <- obj$num.trees
nobs <- object$model.rf$num.samples
nnew <- nrow(x)
weights <- abcrf:::findweights(origNodes, nodes, inbag, as.integer(nobs), as.integer(nnew), as.integer(ntree)) # cpp function call
weights.std <- weights/ntree
return(weights.std[, 1])
}
#load data
load("analysis/tuning.RData")
load("analysis/main_simulations/main_simulations_1.RData")
a <- main_simulations
load("analysis/main_simulations/main_simulations_2.RData")
b <- main_simulations
load("analysis/main_simulations/main_simulations_3.RData")
c <- main_simulations
load("analysis/main_simulations/main_simulations_4.RData")
d <- main_simulations
load("analysis/main_simulations/main_simulations_5.RData")
e <- main_simulations
main_simulations <- list(priors = rbind(a$priors, b$priors, c$priors, d$priors, e$priors), sum_stats = c(a$sum_stats, b$sum_stats, c$sum_stats, d$sum_stats, e$sum_stats))
rm(list = c("a", "b", "c", "d", "e"))
#separate brands data by year
brands_1990 <- data.table::data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table::data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table::data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table::data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table::data.table(brands[which(brands[, 10] == 2016), 1:9])
#get vector of observed summary statistics
obs_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
#convert to data frame with same structure as vector of observed summary statistics
sum_stats <- do.call("rbind", lapply(1:length(main_simulations$sum_stats), function(x){c(t(as.matrix(main_simulations$sum_stats[[x]])))}))
#restructure obs stats
obs_stats <- as.data.frame(t(obs_stats))
#store priors in new object for transformation for random forest
priors <- main_simulations$priors
#log transform complexity and strength params, and logit transform radii (functions adopted from abc package)
logit_bounds <- c(0, 690)
logit <- function(param, logit_bounds){
temp <- (param - logit_bounds[1])/(logit_bounds[2] - logit_bounds[1])
return(log(temp/(1 - temp)))
}
inv_logit <- function(param, logit_bounds){
temp <- exp(param)/(1 + exp(param))
return((temp*(logit_bounds[2] - logit_bounds[1])) + logit_bounds[1])
}
priors[, 1] <- log(priors[, 1])
priors[, 2] <- logit(priors[, 2], logit_bounds)
priors[, 3] <- logit(priors[, 3], logit_bounds)
priors[, 4] <- log(priors[, 4])
priors[, 5] <- log(priors[, 5])
#set sample size for random forest (80% of data)
sample_size <- 0.8*nrow(sum_stats)
#construct object to hold predictions
predictions <- list()
#set number of cores
ncores <- detectCores() - 1
#set value of i
i <- 1
#load saved predictions
load("analysis/abc_rf_predictions.RData")
predictions
abc_rf_predictions <- predictions
abc_rf_predictions
#save predictions
save(abc_rf_predictions, file = "analysis/abc_rf_predictions.RData")
names(transf_priors)
#load packages
library(data.table)
library(ggplot2)
library(ggfortify)
library(abcrf)
library(EasyABC)
library(abc)
library(tuneRanger)
#set working directory, load data, etc.
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
#setwd(system("pwd", intern = T))
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
source("cattlebrandABM.R")
#modify function from abcrf::densityPlot.regAbcrf for weight extraction
extract_weights <- function(object, obs, training, paral=FALSE, ncores= if(paral) max(detectCores()-1,1) else 1, ...){
x <- obs
mf <- match.call(expand.dots=FALSE)
mf <- mf[1]
mf$formula <- object$formula
mf$data <- training
training <- mf$data
mf[[1L]] <- as.name("model.frame")
mf <- eval(mf, parent.frame() )
mt <- attr(mf, "terms")
resp <- model.response(mf)
obj <- object$model.rf
inbag <- matrix(unlist(obj$inbag.counts, use.names=FALSE), ncol=obj$num.trees, byrow=FALSE)
obj[["origNodes"]] <- predict(obj, training, predict.all=TRUE, num.threads=ncores)$predictions
obj[["origObs"]] <- model.response(mf)
#####################
origObs <- obj$origObs
origNodes <- obj$origNodes
nodes <- predict(obj, x, predict.all=TRUE, num.threads=ncores )$predictions
if(is.null(dim(nodes))) nodes <- matrix(nodes, nrow=1)
ntree <- obj$num.trees
nobs <- object$model.rf$num.samples
nnew <- nrow(x)
weights <- abcrf:::findweights(origNodes, nodes, inbag, as.integer(nobs), as.integer(nnew), as.integer(ntree)) # cpp function call
weights.std <- weights/ntree
return(weights.std[, 1])
}
#load data
load("analysis/tuning.RData")
load("analysis/main_simulations/main_simulations_1.RData")
a <- main_simulations
load("analysis/main_simulations/main_simulations_2.RData")
b <- main_simulations
load("analysis/main_simulations/main_simulations_3.RData")
c <- main_simulations
load("analysis/main_simulations/main_simulations_4.RData")
d <- main_simulations
load("analysis/main_simulations/main_simulations_5.RData")
e <- main_simulations
main_simulations <- list(priors = rbind(a$priors, b$priors, c$priors, d$priors, e$priors), sum_stats = c(a$sum_stats, b$sum_stats, c$sum_stats, d$sum_stats, e$sum_stats))
rm(list = c("a", "b", "c", "d", "e"))
#separate brands data by year
brands_1990 <- data.table::data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table::data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table::data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table::data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table::data.table(brands[which(brands[, 10] == 2016), 1:9])
#get vector of observed summary statistics
obs_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
#convert to data frame with same structure as vector of observed summary statistics
sum_stats <- do.call("rbind", lapply(1:length(main_simulations$sum_stats), function(x){c(t(as.matrix(main_simulations$sum_stats[[x]])))}))
#restructure obs stats
obs_stats <- as.data.frame(t(obs_stats))
#store priors in new object for transformation for random forest
transf_priors <- main_simulations$priors
#log transform complexity and strength params, and logit transform radii (functions adopted from abc package)
logit_bounds <- c(0, 690)
logit <- function(param, logit_bounds){
temp <- (param - logit_bounds[1])/(logit_bounds[2] - logit_bounds[1])
return(log(temp/(1 - temp)))
}
inv_logit <- function(param, logit_bounds){
temp <- exp(param)/(1 + exp(param))
return((temp*(logit_bounds[2] - logit_bounds[1])) + logit_bounds[1])
}
transf_priors[, 1] <- log(transf_priors[, 1])
transf_priors[, 2] <- logit(transf_priors[, 2], logit_bounds)
transf_priors[, 3] <- logit(transf_priors[, 3], logit_bounds)
transf_priors[, 4] <- log(transf_priors[, 4])
transf_priors[, 5] <- log(transf_priors[, 5])
#set sample size for random forest (80% of data)
sample_size <- 0.8*nrow(sum_stats)
#construct object to hold predictions
abc_rf_predictions <- list()
#set number of cores
ncores <- detectCores() - 1
#set value of i
i <- 1
transf_priors
names(transf_priors)
#load saved predictions
load("analysis/abc_rf_predictions.RData")
xlabs <- c("Complexity", "Copy Radius", "Dist Radius", "Copy Strength", "Dist Strength")
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
for(i in 1:ncol(main_simulations$priors)){
temp <- density(exp(transf_priors[, i]), weights = predictions[[i]]$weights)
prior <- data.frame(value = density(exp(transf_priors[, i]))$x, density = density(exp(transf_priors[, i]))$y, id = 0, lt = 1)
posterior <- data.frame(value = temp$x, density = temp$y, id = 1)
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, linetype = as.factor(lt))) +
xlab(xlabs[i]) + ylab("Density") + xlim(xlims[[i]]) +
theme_linedraw() + theme(legend.position = "none", axis.title.x = ggtext::element_markdown())
assign(names(transf_priors)[i], plot)
}
xlabs <- c("Complexity", "Copy Radius", "Dist Radius", "Copy Strength", "Dist Strength")
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
for(i in 1:ncol(transf_priors)){
temp <- density(exp(transf_priors[, i]), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(exp(transf_priors[, i]))$x, density = density(exp(transf_priors[, i]))$y, id = 0, lt = 1)
posterior <- data.frame(value = temp$x, density = temp$y, id = 1)
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, linetype = as.factor(lt))) +
xlab(xlabs[i]) + ylab("Density") + xlim(xlims[[i]]) +
theme_linedraw() + theme(legend.position = "none", axis.title.x = ggtext::element_markdown())
assign(names(transf_priors)[i], plot)
}
abc_rf_predictions[[1]]
abc_rf_predictions[[1]]$weights
i <- 1
temp <- density(exp(transf_priors[, i]), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(exp(transf_priors[, i]))$x, density = density(exp(transf_priors[, i]))$y, id = 0, lt = 1)
posterior <- data.frame(value = temp$x, density = temp$y, id = 1)
combined <- rbind(posterior, prior)
prior
posterior
prior
temp <- density(exp(transf_priors[, i]), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(exp(transf_priors[, i]))$x, density = density(exp(transf_priors[, i]))$y, id = 0, lt = 1)
posterior <- data.frame(value = temp$x, density = temp$y, id = 1, lt = 0)
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, linetype = as.factor(lt))) +
xlab(xlabs[i]) + ylab("Density") + xlim(xlims[[i]]) +
theme_linedraw() + theme(legend.position = "none", axis.title.x = ggtext::element_markdown())
xlabs <- c("Complexity", "Copy Radius", "Dist Radius", "Copy Strength", "Dist Strength")
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
for(i in 1:ncol(transf_priors)){
temp <- density(exp(transf_priors[, i]), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(exp(transf_priors[, i]))$x, density = density(exp(transf_priors[, i]))$y, id = 0, lt = 1)
posterior <- data.frame(value = temp$x, density = temp$y, id = 1, lt = 0)
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, linetype = as.factor(lt))) +
xlab(xlabs[i]) + ylab("Density") + xlim(xlims[[i]]) +
theme_linedraw() + theme(legend.position = "none", axis.title.x = ggtext::element_markdown())
assign(names(transf_priors)[i], plot)
}
#combine plots and print to file
#png("analysis/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
legend <- get_legend(complexity)
plot_grid(complexity + theme(legend.position="none"),
copy_radius + theme(legend.position="none"),
dist_radius + theme(legend.position="none"),
copy_strength + theme(legend.position="none"),
dist_strength + theme(legend.position="none"),
legend, labels = c("A", "B", "C", "D", "E"), align = "hv")
library(cowplot)
#combine plots and print to file
#png("analysis/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
plot_grid(complexity,
copy_radius,
dist_radius,
copy_strength,
dist_strength,
labels = c("A", "B", "C", "D", "E"), align = "hv")
xlabs <- c("Complexity", "Copy Radius", "Dist Radius", "Copy Strength", "Dist Strength")
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
for(i in 1:ncol(transf_priors)){
if(i %in% c(1, 4, 5)){
temp <- density(exp(transf_priors[, i]), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(exp(transf_priors[, i]))$x, density = density(exp(transf_priors[, i]))$y, id = 0, lt = 1)
} else{
temp <- density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds))$x, density = density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds))$y, id = 0, lt = 1)
}
posterior <- data.frame(value = temp$x, density = temp$y, id = 1, lt = 0)
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, linetype = as.factor(lt))) +
xlab(xlabs[i]) + ylab("Density") + xlim(xlims[[i]]) +
theme_linedraw() + theme(legend.position = "none", axis.title.x = ggtext::element_markdown())
assign(names(transf_priors)[i], plot)
}
#combine plots and print to file
#png("analysis/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
plot_grid(complexity,
copy_radius,
dist_radius,
copy_strength,
dist_strength,
labels = c("A", "B", "C", "D", "E"), align = "hv")
#dev.off()
#combine plots and print to file
#png("analysis/abc_rej_posteriors.png", units = "in", width = 11, height = 7, res = 300)
plot_grid(complexity,
copy_radius,
dist_radius,
copy_strength,
dist_strength,
labels = c("A", "B", "C", "D", "E"), align = "hv")
xlabs <- c("Complexity", "Copy Radius", "Dist Radius", "Copy Strength", "Dist Strength")
xlims <- list(c(0, 5), c(1, 689), c(1, 689), c(0, 10), c(0, 10))
for(i in 1:ncol(transf_priors)){
if(i %in% c(1, 4, 5)){
temp <- density(exp(transf_priors[, i]), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(exp(transf_priors[, i]))$x, density = density(exp(transf_priors[, i]))$y, id = 0, lt = 1)
} else{
temp <- density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds), weights = abc_rf_predictions[[i]]$weights)
prior <- data.frame(value = density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds))$x, density = density(inv_logit(transf_priors[, i], logit_bounds = logit_bounds))$y, id = 0, lt = 1)
}
posterior <- data.frame(value = temp$x, density = temp$y, id = 1, lt = 0)
combined <- rbind(posterior, prior)
plot <- ggplot(combined) + geom_line(mapping = aes(x = value, y = density, group = id, linetype = as.factor(lt))) +
xlab(xlabs[i]) + ylab("Density") + xlim(xlims[[i]]) +
theme_linedraw() + theme(legend.position = "none", axis.title.x = ggtext::element_markdown())
assign(names(transf_priors)[i], plot)
}
#combine plots and print to file
png("analysis/abc_rf_posteriors.png", units = "in", width = 11, height = 7, res = 300)
plot_grid(complexity,
copy_radius,
dist_radius,
copy_strength,
dist_strength,
labels = c("A", "B", "C", "D", "E"), align = "hv")
dev.off()
#load packages
library(data.table)
library(tuneRanger)
#set working directory, load data, etc.
setwd("~/Documents/Work/Summer_2021/Cattle_Brands/CattleBrandABM")
load("converted_brands.RData")
load("components.RData")
load("location_data/all_zips.RData")
source("cattlebrandABM.R")
#load data
load("analysis/main_simulations/main_simulations_1.RData")
a <- main_simulations
load("analysis/main_simulations/main_simulations_2.RData")
b <- main_simulations
load("analysis/main_simulations/main_simulations_3.RData")
c <- main_simulations
load("analysis/main_simulations/main_simulations_4.RData")
d <- main_simulations
load("analysis/main_simulations/main_simulations_5.RData")
e <- main_simulations
main_simulations <- list(priors = rbind(a$priors, b$priors, c$priors, d$priors, e$priors), sum_stats = c(a$sum_stats, b$sum_stats, c$sum_stats, d$sum_stats, e$sum_stats))
rm(list = c("a", "b", "c", "d", "e"))
#separate brands data by year
brands_1990 <- data.table(brands[which(brands[, 10] == 1990), 1:9])
brands_2008 <- data.table(brands[which(brands[, 10] == 2008), 1:9])
brands_2014 <- data.table(brands[which(brands[, 10] == 2014), 1:9])
brands_2015 <- data.table(brands[which(brands[, 10] == 2015), 1:9])
brands_2016 <- data.table(brands[which(brands[, 10] == 2016), 1:9])
#get vector of observed summary statistics
obs_stats <- c(get_sum_stats(as.matrix(brands_2008), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2014), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2015), components, all_zips, angles = FALSE),
get_sum_stats(as.matrix(brands_2016), components, all_zips, angles = FALSE))
#convert to data frame with same structure as vector of observed summary statistics
sum_stats <- do.call("rbind", lapply(1:length(main_simulations$sum_stats), function(x){c(t(as.matrix(main_simulations$sum_stats[[x]])))}))
#restructure obs stats
obs_stats <- as.data.frame(t(obs_stats))
#log transform complexity and strength params, and logit transform radii (functions adopted from abc package)
logit_bounds <- c(0, 690)
logit <- function(param, logit_bounds){
temp <- (param - logit_bounds[1])/(logit_bounds[2] - logit_bounds[1])
return(log(temp/(1 - temp)))
}
inv_logit <- function(param, logit_bounds){
temp <- exp(param)/(1 + exp(param))
return((temp*(logit_bounds[2] - logit_bounds[1])) + logit_bounds[1])
}
main_simulations$priors[, 1] <- log(main_simulations$priors[, 1])
main_simulations$priors[, 2] <- logit(main_simulations$priors[, 2], logit_bounds)
main_simulations$priors[, 3] <- logit(main_simulations$priors[, 3], logit_bounds)
main_simulations$priors[, 4] <- log(main_simulations$priors[, 4])
main_simulations$priors[, 5] <- log(main_simulations$priors[, 5])
#set sample size for random forest (80% of data)
sample_fraction <- 0.8
#set sample used for tuning (10% of data)
tuning_sample <- sample(nrow(sum_stats), nrow(sum_stats)*0.10)
#number of cores
ncores <- detectCores() - 1
load("analysis/abc_rf_tuning.RData")
abc_rf_tuning <- tuning
#save tuning
save(abc_rf_tuning, file = "analysis/abc_rf_tuning.RData")
